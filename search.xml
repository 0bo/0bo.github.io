<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>WordPress提示 &quot;在裁剪您的图像时发生了错误&quot;</title>
    <url>/wordpress-editing-pics-error/</url>
    <content><![CDATA[<p>前几天上传图片想用作site icon，但是提示:”在裁剪您的图像时发生了错误。”</p>
<p>英文显示，”There has been an error cropping your image.”</p>
<p>这是因为缺少PHP GD库的原因，貌似直接装php7.0-fpm不会装这个库。没有这个库，则图片水印、缩略图、验证码等都无法使用。</p>
<p>解决:</p>
<span id="more"></span>

<p>Debian&#x2F;Ubuntu下运行：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get install php7.0-gd</span><br></pre></td></tr></table></figure>
<p>#我用的php7.0，如果是其他版本，请自行修改</p>
<p>CentOS下运行：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install php7.0-gd</span><br></pre></td></tr></table></figure>
<p>安装PHP-GD库后</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo service nginx restart</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ECM</category>
      </categories>
      <tags>
        <tag>wordpress</tag>
        <tag>error</tag>
      </tags>
  </entry>
  <entry>
    <title>Macbook-12 装win10后蓝牙模块不识别，蓝牙鼠标不能用</title>
    <url>/macbook-win10-bluetooth/</url>
    <content><![CDATA[<p>有个朋友macbook 12寸装了win8.1，发现无法检测的蓝牙，更不用说蓝牙鼠标了。</p>
<p>解决方法如下:</p>
<span id="more"></span>

<p>为了正版win10，激活win8.1后，用系统更新升级win10。macbook 12寸只有一个口，直接用u盘安装显示必须接电源。。。接了电源就不能接u盘，so。。。。充分说明苹果反人类的本质。。。</p>
<p><strong>升级之后安装iTunes，<br>选帮助-更新apple软件，<br>更新最新版的bootcamp 6.0 for win10 update.</strong></p>
<p>之后就可以识别蓝牙硬件了。</p>
<p>想使用蓝牙鼠标，可能遇到的情况是不能连接，或者时断时续。两种方案：</p>
<p>1.在mac下先断开蓝牙鼠标连接，在win10中连接，再回到mac连接。</p>
<p>2.如果不行，那么可能在mac下就没有连接过，先在mac下连接，再回到win10下连接。</p>
<p>试试吧！</p>
]]></content>
      <categories>
        <category>ECM</category>
      </categories>
      <tags>
        <tag>macbook</tag>
        <tag>win10</tag>
        <tag>bluetooth</tag>
      </tags>
  </entry>
  <entry>
    <title>WR-703N 安装openwrt到外置储存</title>
    <url>/703n-openwrt-external-storage/</url>
    <content><![CDATA[<p>这两天折腾了下openwrt，起因是发现了一个深藏的703n，这个古老的小东西竟然非常受openwrt社区欢迎，一直是主要支持的设备之一。</p>
<p>根据<a href="https://wiki.openwrt.org/toh/tp-link/tl-wr703n%EF%BC%8C">https://wiki.openwrt.org/toh/tp-link/tl-wr703n，</a></p>
<p>安装了openwrt其中也是颇为曲折，在windows下的curl不好找，最新版的都是带ssl的，使用sftp各种错误，后来在</p>
<p><a href="http://www.right.com.cn/forum/forum.php?mod=viewthread&amp;tid=159078&amp;highlight=703n">http://www.right.com.cn/forum/forum.php?mod=viewthread&amp;tid=159078&amp;highlight=703n</a></p>
<p>的2楼找到了先贤做好的各种文件，直接就可以刷了，结合这两篇文章总算是刷好了openwrt，版本新的吓人，DESIGNATED DRIVER (Bleeding Edge, r49379) ，空间也是占用的很多，想玩儿必须是装个外接u盘了，很可惜网上这方面的信息比较少，大多数也很旧，折腾了半天，发现都成功不了。以前玩儿vps，都没有搞过挂载这回事儿啊，无奈跑去openwrt的wiki发现，人家早就更新了最新的信息啊。。。参见：</p>
<p><a href="https://wiki.openwrt.org/doc/howto/extroot">https://wiki.openwrt.org/doc/howto/extroot</a></p>
<span id="more"></span>

<p>这里想说的是，不要跟着网上的其他教程贴子瞎搞，都太老了。。。另外，703n的空间实在是太小了，大约400+kb，</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">opkg install block-mount kmod-fs-ext4 kmod-usb-storage-extras&lt;/pre&gt;</span><br></pre></td></tr></table></figure>
<p>就足以占个七七八八了，其他的都先别装，跟着教程走完自然就海阔天空啦！</p>
<p>主要有两条命令：</p>
<ol>
<li>Prepare your external storage root overlay <em>copy files from existing &#x2F;overlay into new root</em></li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mount /dev/sda1 /mnt ; tar -C /overlay -cvf - . | tar -C /mnt -xf - ; umount /mnt</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>Create fstab with the following command</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">block detect &gt; /etc/config/fstab; \</span><br><span class="line">   sed -i s/option$&#x27;\t&#x27;enabled$&#x27;\t&#x27;\&#x27;0\&#x27;/option$&#x27;\t&#x27;enabled$&#x27;\t&#x27;\&#x27;1\&#x27;/ /etc/config/fstab; \</span><br><span class="line">   sed -i s#/mnt/sda1#/overlay# /etc/config/fstab; \</span><br><span class="line">   cat /etc/config/fstab;</span><br></pre></td></tr></table></figure>
<p>还有windows下将u盘分区并格式化一部分为ext4和swap的工具可以用minitool，很好用，自己搜一下哈。</p>
<p>就酱</p>
<p>其他参考：<a href="https://www.coldawn.com/tl-wr703n-tl-wr720n-official-openwrt-barrier_breaker-14-07-extroot-rootfs-on-remove-disk/">https://www.coldawn.com/tl-wr703n-tl-wr720n-official-openwrt-barrier_breaker-14-07-extroot-rootfs-on-remove-disk/</a></p>
<p>试了一下Chaos Calmer 15.05.1，安装完成后剩余空间只有280kb，最经典的是删除固件自带的程序后这个空间会进一步缩小，是没有办法实现本文的文件转移的，因为kmod-fs-ext4就需要200+空间的，无奈再好换回DESIGNATED DRIVER。想了想，可能是openwrt固件里编译好的程序没有办法删除吧，删除了其实相当于在rom中写入了些什么文件用来屏蔽想删除的程序，因而越删越小？猜测。。</p>
<p>不能挂载fat32的情况，</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dmesg | tail</span><br></pre></td></tr></table></figure>
<p>可见缺少kmod-nls-cp437     kmod-nls-iso8859-1     kmod-nls-utf8，安装后</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mount -t vfat /mnt/sda1 /data </span><br></pre></td></tr></table></figure>
<p>即可</p>
<p>参考：<a href="http://www.right.com.cn/forum/forum.php?mod=redirect&amp;goto=findpost&amp;ptid=54211&amp;pid=370118">http://www.right.com.cn/forum/forum.php?mod=redirect&amp;goto=findpost&amp;ptid=54211&amp;pid=370118</a></p>
]]></content>
      <categories>
        <category>Tutorial</category>
      </categories>
      <tags>
        <tag>openwrt</tag>
        <tag>703n</tag>
      </tags>
  </entry>
  <entry>
    <title>windows下ftp服务器无法访问</title>
    <url>/window-ftp-no-access/</url>
    <content><![CDATA[<p>以前在win2003下的ftp在安装iis和FTP服务，设置后，即可使用。</p>
<p>最近的新买了一台windows server 2008的，流程走完竟然不能访问。搜索了一下：</p>
<span id="more"></span>

<p>windows2003和windows2008服务器端安装IIS自带的FTP功能，如果防火墙关闭才可以通过FTP正常访问，打开FTP则不能访问，解决办法如下：</p>
<ol>
<li>在windows2003服务器端设置：</li>
</ol>
<p>控制面板 》系统和安全 》Windows 防火墙 》允许的程序”，在“允许另一个程序”中添加 “C:\WINDOWS\system32\inetsrv\inetinfo.exe”这个程序，添加完成即可</p>
<ol start="2">
<li>在windows 2008&#x2F;2012服务器端设置：</li>
</ol>
<p>控制面板 》系统和安全 》Windows 防火墙 》允许的程序”，在“允许另一个程序”中添加 “C:\Windows\System32\svchost.exe”这个程序，添加完成即可。</p>
<p>步骤2应该是大部分问题之所在，win10也需要调整此处。</p>
<p>参考：<a href="http://kkworms.blog.51cto.com/540865/558477">http://kkworms.blog.51cto.com/540865/558477</a></p>
<p><a href="http://www.myhack58.com/Article/sort099/sort0100/2015/58873.htm">http://www.myhack58.com/Article/sort099/sort0100/2015/58873.htm</a></p>
]]></content>
      <categories>
        <category>ECM</category>
      </categories>
      <tags>
        <tag>windows</tag>
        <tag>ftp</tag>
        <tag>firewall</tag>
      </tags>
  </entry>
  <entry>
    <title>win10升级导致的键盘失灵和卡锁屏界面</title>
    <url>/win10-upgrade-keyboard-login/</url>
    <content><![CDATA[<ol>
<li>升级win10后键盘失灵，必须重启才能使用。</li>
</ol>
<p>网上的部分解决方案说关闭电源管理中的快速启动，个人又想保留这一功能，后各种查询，解决方法如下：</p>
<span id="more"></span>

<p>注册表删除：</p>
<p>[HKEY_LOCAL_MACHINE\SYSTEM\ControlSet001\Services\PECKbdProtector]</p>
<p>文件删除windows&#x2F;system32&#x2F;driver&#x2F;peckp_x64.sys</p>
<p>即可。</p>
<ol start="2">
<li>win10周年更新，卡锁屏界面的解决方案</li>
</ol>
<p>打开管理员的命令提示符，运行<br>if exist “%SystemRoot%\System32\InputMethod\CHS\ChsIME.exe” (<br>takeown &#x2F;f “%SystemRoot%\System32\InputMethod\CHS\ChsIME.exe” &#x2F;A<br>icacls “%SystemRoot%\System32\InputMethod\CHS\ChsIME.exe” &#x2F;deny “NT AUTHORITY\SYSTEM:RX”<br>)</p>
<p>就不会出现SYSTEM用户的ChsIME.exe了</p>
<p>参考：<a href="http://bbs.pcbeta.com/viewthread-1706070-1-1.html">http://bbs.pcbeta.com/viewthread-1706070-1-1.html</a></p>
<p>还有人说关掉个性化-锁屏界面-在登录屏幕上显示锁屏界面背景图片，这个没有是不知道了。还有人说跟快速启动有关。。。为啥老是快速启动背锅啊。。。</p>
]]></content>
      <categories>
        <category>ECM</category>
      </categories>
      <tags>
        <tag>error</tag>
        <tag>win10</tag>
      </tags>
  </entry>
  <entry>
    <title>wordpress与nginx迁移之坑</title>
    <url>/wordpress-nginx-error/</url>
    <content><![CDATA[<ol>
<li><p>nginx 设置include时*.conf，但实际设置文件却没有加.conf…</p>
</li>
<li><p>nginx certs写的结尾crt和cert不同。。找不到</p>
</li>
<li><p>wp-config.php中的WP_DEBUG 改成ture可以看到具体的错误提示“error establishing a database connection”，实际上我是把用户名和密码设置错了。。。</p>
</li>
<li><p>413 Request Entity Too Large. 在nginx.conf的http{}段， 增大nginx上传文件大小限制</p>
</li>
</ol>
<span id="more"></span>

<p>设置允许发布内容为8M:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">client_max_body_size 8M;</span><br><span class="line">client_body_buffer_size 128k;</span><br></pre></td></tr></table></figure>
<p>另外如果运行的是php，那么还要检查<code>php.ini</code>，这个大小<code>client_max_body_size</code>要和<code>php.ini</code>中的如下值的最大值一致或者稍大，这样就不会因为提交数据大小不一致出现的错误。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">post_max_size = 8M</span><br><span class="line">upload_max_filesize = 6M</span><br></pre></td></tr></table></figure>
<p>修改完配置后，别忘记重新加载。</p>
<p>虽然这样修改能解决一般问题，相信大家都会问<code>post_max_size</code> 和 <code>upload_max_filesize</code> 之间关系是什么？</p>
<p>从字面含义看一个是上传文件最大值<code>upload_max_filesize</code>，一个是通过POST提交数据的最大值<code>post_max_size</code>，一般在php中用的是POST方式上传。</p>
<p>所以<code>php.ini</code>中设置 <code>memory_limit</code> ; <code>post_max_size</code> ; <code>upload_max_filesize</code></p>
<p>当上传大文件时为了防止网速慢时超时现象，需要适当调大<code>max_execution_time</code>的值。</p>
<p>参考：<a href="http://www.nginx.cn/837.html">http://www.nginx.cn/837.html</a></p>
]]></content>
      <categories>
        <category>ECM</category>
      </categories>
      <tags>
        <tag>wordpress</tag>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>x200 wake on lan wol 远程启动</title>
    <url>/x200-WOL/</url>
    <content><![CDATA[<p>家里用闲置的x200建了服务器，各种爽，各种折腾。</p>
<p>这日，不小心在外边把机器给关了，于是有了远程启动的心头长草。家里有花生棒，年付58可以添加远程启动功能，但是自从有了移动的公网ip后，花生棒完全闲置，也不想再花钱了，觉得应该可以从外界启动的吧，那就在想想机器怎么搞吧。</p>
<p>主要有以下几个要点：</p>
<span id="more"></span>

<ol>
<li>BIOS要启动wake on lan</li>
<li>在网卡属性里选择好允许远程唤醒</li>
<li>最重要的一步！！！如果你用的win10，在电源管理中关闭“快速启动”</li>
</ol>
<p>嗯，手机上装了个wol，各种爽！</p>
<p>—2017-10-25—更新—</p>
<p>还需要更新网卡驱动，否则网卡属性内可能没有远程唤醒，甚至即使显示有选项，设置后也会无效</p>
<p>—2017-10-29—-更新—</p>
<p>在路由器中既要设置静态ip，也要将ip-arp绑定。这是因为当路由器重启时，arp表消失，此时外部传入的唤醒信号因为找不到ip而丢弃数据包。</p>
]]></content>
      <categories>
        <category>Tutorial</category>
      </categories>
      <tags>
        <tag>x200</tag>
        <tag>wol</tag>
      </tags>
  </entry>
  <entry>
    <title>你会打电话给谁？</title>
    <url>/who-will-you-call/</url>
    <content><![CDATA[<p>突然看到这么一个情景模拟。</p>
<p>如果有个杀手用枪指着你的头，让你打电话，对方接电话了他就扣扳机，不接就放你走，你会发给谁？</p>
<span id="more"></span>

<p>我想了很久，觉得打给谁都有风险啊?</p>
<p>也许打给我导师吧，不是因为有仇，而是她是挂我电话最多的那个人，有更多的机会救卿性命。</p>
<p>说到仇恨，也许是自己阅历浅薄，没有刻骨铭心的仇恨，总觉得即使过去很讨厌的人，许多年没有联系了，也许我打电话，他们反倒会很大概率和蔼地接起电话，问问，寒暄一下。人也许不是神奇的动物，但时间一定是伟大的力量，人类或深痛或真挚的情感，都会随着时光消逝。</p>
<p>所以，曾经刻骨铭心的感情，然后变得无话可说，最后就是相忘于世间，电话，我又是否会接呢？</p>
]]></content>
      <categories>
        <category>Thinking</category>
      </categories>
  </entry>
  <entry>
    <title>android电视盒子无法打开win10共享文件夹</title>
    <url>/0xc0000205-android-shared-folder/</url>
    <content><![CDATA[<p>前段时间买了个android电视盒子，在家中服务器上开启了共享，之前没有问题，突然有天win10升级，之后就各种诡异。共享的盘符，随即出现一个或多个无法访问，具体表现就是共享文件夹点了没有反应，而同时win电脑则可以访问。换了android手机用es文件管理器同样无法访问，也没有错误提示。</p>
<p>后来想了个办法，整个文件夹复制到手机，终于看到了错误提示代码 (0xC0000205)。</p>
<span id="more"></span>

<p>查了无数资料，百度无望，都是在说改权限，但我的设置没有问题。最后在谷歌上搜了好久，一个<a href="https://www.tenforums.com/network-sharing/43931-samba-access-android-device-stopped-working-post885824.html?s=62a07bacd1f654ea36105f0a2d60cbe7#post885824">论坛回复</a>给出了正解。</p>
<p>So follow the link and add the new <code>IRPStackSize DWORD</code> in</p>
<p><code>HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\LanmanServer\Parameters</code></p>
<p>and set the value to <code>50</code> works for me. Hope this helps other people.</p>
<p>注意，50是十进制数</p>
<p>他注册论坛为了分享，我注册论坛，为了感谢他。</p>
<p>也希望能帮到需要的人吧.</p>
<hr>
<p>2018.11.1 在“程序和功能”-“启动或关闭windows功能”-“SMB1.0XX”开启。</p>
<hr>
<p>2019.5.3 another <a href="https://forum.kodi.tv/showthread.php?tid=304203">link</a> may be helpful.</p>
<p>1. </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Click on Connections:Ethernet</span><br><span class="line">Click on Properties button (lower left)</span><br><span class="line">Double click internet Protocol Version 4 (TCP/IPv4)</span><br><span class="line">Click Advanced Button lower right</span><br><span class="line">Click the WINS tab</span><br><span class="line">Click the radio button to Enable NetBios over TCP/IP</span><br></pre></td></tr></table></figure>

<ol start="2">
<li></li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">I could not get the sc config command (or sc.exe in Powershell) to achieve the result I desired, so I resorted to two registry edits and a reboot.  See new steps below. Try this:</span><br><span class="line">1. Run &quot;tasklist /svc&quot;</span><br><span class="line">In the output, you should see something like this: Browser and LanmanServer running in their own svchost processes. *Sample output below is abbreviated for illustration purposes. You will see a longer list.Image Name                     PID Services</span><br><span class="line">========================= ======== ==============</span><br><span class="line">svchost.exe                   2772 LanmanServer</span><br><span class="line">svchost.exe                   2868 Browser</span><br><span class="line"></span><br><span class="line">2. Run these two commands to add the SvcHostSplitDisable registry value set to 1.</span><br><span class="line"></span><br><span class="line">REG ADD HKLM\SYSTEM\CurrentControlSet\Services\Browser /v SvcHostSplitDisable /t REG_DWORD /d 1 /f</span><br><span class="line"></span><br><span class="line">REG ADD HKLM\SYSTEM\CurrentControlSet\Services\LanmanServer /v SvcHostSplitDisable /t REG_DWORD /d 1 /f</span><br><span class="line"></span><br><span class="line">This will reconfigure the Browser service to run in a shared svchost with LanmanServer like in previous versions of Windows.</span><br></pre></td></tr></table></figure>

<p>3. </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Create a user profile with password in Windows 10. It&#x27;s not wise to use your main Windows admin profile as Kodi will leak this password in plain text.</span><br><span class="line"></span><br><span class="line">Make sure your media folder is shared to this user. I will presume you know how to set up a Windows share.</span><br><span class="line"></span><br><span class="line">Install Kodi v.18. Until Microsoft fixes SMB v.1 (maybe in June), you cannot share to earlier builds.</span><br><span class="line"></span><br><span class="line">(More info: https://support.microsoft.com/en-us/help...-kb4103721 )</span><br><span class="line"></span><br><span class="line">In Kodi &gt; Settings &gt; Services &gt; SMB &gt; Default settings (min none, max v.3).</span><br><span class="line"></span><br><span class="line">In Kodi File Manager &gt; Add Source &gt; Browse &gt; Add Network Location &gt; (Protocol SMB) &gt; Enter fields: Server Name, Shared Folder, Username, Password (do no attempt to browse there).</span><br><span class="line"></span><br><span class="line">Once you&#x27;ve succeeded in creating a link to your shared folder you can choose it as an Add Source shortcut for all media.</span><br><span class="line"></span><br><span class="line">NB: Make sure you instruct Kodi to remember your password.</span><br></pre></td></tr></table></figure>

<p>4.<br><strong>Don’t use USB Hub to connect your hard driver!!</strong></p>
]]></content>
      <categories>
        <category>ECM</category>
      </categories>
      <tags>
        <tag>error</tag>
        <tag>win10</tag>
        <tag>android</tag>
        <tag>tvbox</tag>
      </tags>
  </entry>
  <entry>
    <title>debian8编译qbittorrent提示libtorrent-rasterbar.so.7缺失的解决</title>
    <url>/qbittorrent-libtorrent-rasterbar-so-7/</url>
    <content><![CDATA[<p>debian8 x64 编译 qbittorrent 3.3.11.</p>
<p>根据教程<a href="https://github.com/qbittorrent/qBittorrent/wiki/Compiling-qBittorrent-on-Debian-and-Ubuntu">Compiling-qBittorrent-on-Debian-and-Ubuntu</a>和 <a href="https://github.com/qbittorrent/qBittorrent/wiki/Setting-up-qBittorrent-on-Ubuntu-server-as-daemon-with-Web-interface-(15.04-and-newer">Setting-up-qBittorrent-on-Ubuntu-server-as-daemon-with-Web-interface-(15.04-and-newer)</a>进行操作，最终提示：</p>
<blockquote>
<p>error while loading shared libraries: libtorrent-rasterbar.so.7: cannot open shared object file: No such file or directory</blockquote></p>
</blockquote>
<p>解决方法 参考：<a href="http://blog.csdn.net/layrong/article/details/38388703">http://blog.csdn.net/layrong/article/details/38388703</a></p>
<p>这种问题的原因有两个：</p>
<span id="more"></span>

<ol>
<li>一个是操作系统里确实没有包含该共享库(lib*.so.*文件)或者共享库版本不对, 遇到这种情况那就去网上下载并安装上即可.</li>
<li>另外一个原因就是已经安装了该共享库, 但执行需要调用该共享库的程序的时候, 程序按照默认共享库路径找不到该共享库文件.  所以安装共享库后要注意共享库路径设置问题, 如下:</li>
</ol>
<ul>
<li><p>如果共享库文件安装到了&#x2F;lib或&#x2F;usr&#x2F;lib目录下, 那么需执行一下ldconfig命令。这个命令的用途, 主要是在默认搜寻目录(&#x2F;lib和&#x2F;usr&#x2F;lib)以及动态库配置文件&#x2F;etc&#x2F;ld.so.conf内所列的目录下, 搜索出可共享的动态链接库(格式如lib*.so*), 进而创建出动态装入程序(ld.so)所需的连接和缓存文件. 缓存文件默认为&#x2F;etc&#x2F;ld.so.cache, 此文件保存已排好序的动态链接库名字列表.</p>
</li>
<li><p>如果共享库文件安装到了&#x2F;usr&#x2F;local&#x2F;lib(很多开源的共享库都会安装到该目录下)或其它”非&#x2F;lib或&#x2F;usr&#x2F;lib”目录下, 那么在执行ldconfig命令前, 还要把新共享库目录加入到共享库配置文件&#x2F;etc&#x2F;ld.so.conf中, 如下:</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># cat /etc/ld.so.conf</span><br><span class="line">include ld.so.conf.d/*.conf</span><br><span class="line"># echo &quot;/usr/local/lib&quot; &gt;&gt; /etc/ld.so.conf</span><br><span class="line"># ldconfig</span><br></pre></td></tr></table></figure>
<ul>
<li>如果共享库文件安装到了其它”非&#x2F;lib或&#x2F;usr&#x2F;lib” 目录下,  但是又不想在&#x2F;etc&#x2F;ld.so.conf中加路径(或者是没有权限加路径). 那可以export一个全局变量LD_LIBRARY_PATH, 然后运行程序的时候就会去这个目录中找共享库.</li>
</ul>
<p>export LD_LIBRARY_PATH&#x3D;&#x2F;usr&#x2F;local&#x2F;mysql&#x2F;lib:$LD_LIBRARY_PATH</p>
<p>一般来讲这只是一种临时的解决方案, 在没有权限或临时需要的时候使用.</p>
<ul>
<li>如果程序需要的库文件比系统目前存在的村文件版本低，可以做一个链接<br>比如：<blockquote>
<p>error while loading shared libraries: libncurses.so.4: cannot open shared<br>object file: No such file or directory</p>
</blockquote>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ls /usr/lib/libncu*</span><br><span class="line">/usr/lib/libncurses.a   /usr/lib/libncurses.so.5</span><br><span class="line">/usr/lib/libncurses.so  /usr/lib/libncurses.so.5.3</span><br></pre></td></tr></table></figure>
<p>可见虽然没有<code>libncurses.so.4</code>，但有<code>libncurses.so.5</code>，是可以向下兼容的<br>建一个链接就好了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ln -s  /usr/lib/libncurses.so.5.3  /usr/lib/libncurses.so.4</span><br></pre></td></tr></table></figure>
<p>我使用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo ldconfig</span><br></pre></td></tr></table></figure>
<p>即解决。</p>
<p>此外，如编译安装，在&#x2F;etc&#x2F;systemd&#x2F;system&#x2F;qbittorrent.service文件中的地址因该是：&#x2F;usr&#x2F;local&#x2F;bin</p>
]]></content>
      <categories>
        <category>ECM</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>debian</tag>
        <tag>qbittorrent</tag>
      </tags>
  </entry>
  <entry>
    <title>github pages本地环境配置</title>
    <url>/github-pages-local-environment/</url>
    <content><![CDATA[<p>在win10下搭建github pages的本地环境真是坎坷多舛，各种错误，而且可用的文档也相对较少，中文的更是寥寥无几。。</p>
<p>主要问题有以下几点：</p>
<ul>
<li>jekyll以及其包管理、开发环境的搭建</li>
<li>github pages环境的配置</li>
</ul>
<span id="more"></span>

<p>要做到第一点，让所有的依赖符合要求，要么vpn，要么换国内源。</p>
<h1 id="1-下载安装ruby"><a href="#1-下载安装ruby" class="headerlink" title="1. 下载安装ruby"></a>1. 下载安装ruby</h1><p>下载 <a href="https://rubyinstaller.org/">rubyinstaller forwindows</a>，注意版本号，比如我在2019.11.06操作时发现，最新的 ruby 2.6和我的Gemfile.lock中的部分组件冲突，不得已下载了2.5的旧版才成功。</p>
<p>安装完成后输入’ridk install’来安装MSYS2, gems等必须组件。问选项的时候一路回车即可。</p>
<h1 id="2-解决网络速度慢"><a href="#2-解决网络速度慢" class="headerlink" title="2. 解决网络速度慢"></a>2. 解决网络速度慢</h1><h2 id="2-1-更换ruby国内源"><a href="#2-1-更换ruby国内源" class="headerlink" title="2.1 更换ruby国内源"></a>2.1 更换ruby国内源</h2><p><code>gem sources --add https://gems.ruby-china.com/ --remove https://rubygems.org/</code></p>
<p>用<code>gem sources -l</code>检测是否替换成功</p>
<h2 id="2-2-给cmd加上代理"><a href="#2-2-给cmd加上代理" class="headerlink" title="2.2 给cmd加上代理"></a>2.2 给cmd加上代理</h2><p>以下命令设置环境变量，只会持续到cmd窗口关闭。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">set http_proxy=http://127.0.0.1:1080</span><br><span class="line">set https_proxy=http://127.0.0.1:1080</span><br></pre></td></tr></table></figure>

<h1 id="2-安装bundler"><a href="#2-安装bundler" class="headerlink" title="2. 安装bundler"></a>2. 安装bundler</h1><p><code>gem install bundler</code></p>
<h1 id="3-进入博客的repository目录"><a href="#3-进入博客的repository目录" class="headerlink" title="3. 进入博客的repository目录"></a>3. 进入博客的repository目录</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">bundle install</span><br><span class="line">bundle exec jekyll server</span><br></pre></td></tr></table></figure>

<h1 id="4-解决“No-GitHub-API-authentication”"><a href="#4-解决“No-GitHub-API-authentication”" class="headerlink" title="4.  解决“No GitHub API authentication”"></a>4.  解决“No GitHub API authentication”</h1><ul>
<li><p>github: [metadata]</p>
</li>
<li><p>填写 <code>_config.yml</code> 中的站点description</p>
</li>
</ul>
<h1 id="Changelog"><a href="#Changelog" class="headerlink" title="Changelog"></a>Changelog</h1><p>2020.8.12 增加切换国内源及加代理</p>
<p>2019.11.06 重写</p>
]]></content>
      <categories>
        <category>Tutorial</category>
      </categories>
      <tags>
        <tag>github pages</tag>
        <tag>jekyll</tag>
      </tags>
  </entry>
  <entry>
    <title>阻止外置硬盘自动休眠</title>
    <url>/external-hard-drive-auto-sleep/</url>
    <content><![CDATA[<p>最近给家里换了个服务器，加了个硬盘柜，但发现硬盘柜中的硬盘时常自动断开连接，四处搜索后，得出以下解决方案：</p>
<h2 id="调整电源选项"><a href="#调整电源选项" class="headerlink" title="调整电源选项"></a>调整电源选项</h2><p>在windows电源选项的计划设置中-更改高级电源设置-USB设置-禁用USB选择性暂停设置。</p>
<span id="more"></span>

<h2 id="调整设备管理器"><a href="#调整设备管理器" class="headerlink" title="调整设备管理器"></a>调整设备管理器</h2><p>在计算机管理中，选择设备管理，通用串行总线控制器里的各个集线器，属性，电源管理，取消<em>允许计算机关闭此设备以节约电源</em></p>
<p>问题解决~</p>
]]></content>
      <categories>
        <category>ECM</category>
      </categories>
      <tags>
        <tag>harddriver</tag>
        <tag>AutoSleep</tag>
      </tags>
  </entry>
  <entry>
    <title>qbittorrent、flexget和AMT配合使用，全自动的盒子配置</title>
    <url>/qbittorrent-flexget-autoremove-torrents/</url>
    <content><![CDATA[<p>qbittorrent应该才是Linux下PT的正确打开方式，尽管网络上rutorrent备受推崇，transmission因为预装在许多nas上而成为许多人唯一知道的选择，但只要有机会选择，那些好用的东西，总会脱颖而出的。qb下载上传如此之快，甩其他客户端（不包括Deluge，没用过）不知几条街，几乎能连上所有的种子，但也会带来一些副作用，比如。。。cpu占用过高，自行取舍哈。</p>
<p>qbittorrent的另一个致命问题是，其webui不支持rss，可想而知对于盒子用户而言这是多么不可理喻的事情，但为了qb的高效率，还是忍了。。。由于懒的学习flexget，一直以来都是通过安装rutorrent来充当rss下载器，然后qb监控ru的.session种子文件夹来实现自动下载。后来，我的这个方法受到了严重挑战，一是不知道为何，qb在我的vps上难以修改watch folder，多番测试，结果都很玄学，可能与<br>配置文件的权限、是否先启动qb完成同意协议的过程并生成配置文件、浏览器缓存等等有关，试了好多次后，最终放弃；二是ru实在太卡了，即使只负责下载种子，作为一个强迫症患者，删除种子的时候都会卡死，是可忍孰不可忍，叔叔能忍，婶婶不能忍，那就ByeBye啦！</p>
<p>被逼无奈，最终捡起flexget，然后开启了新世界的大门！这玩意儿真的是非常便捷强大，比在rutorrent里写正则表达过滤方便太多了！！</p>
<p>最后要介绍的PT贴吧大神做的autoremove-torrents，真的是神器，最终实现了全自动无人值守的盒子配置。下面进入正题吧：</p>
<span id="more"></span>
<p>（本文所有命令均在Ubuntu 16.04 x64下运行，理论上讲18.04也可以，14.04主要是apt和<br>apt-get的区别,均在root用户下，&#x2F;root&#x2F;目录下运行）</p>
<h2 id="安装qbittorrent"><a href="#安装qbittorrent" class="headerlink" title="安装qbittorrent"></a>安装qbittorrent</h2><h3 id="添加源"><a href="#添加源" class="headerlink" title="添加源"></a>添加源</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apt install software-properties-common python-software-properties</span><br><span class="line">add-apt-repository ppa:qbittorrent-team/qbittorrent-stable</span><br><span class="line">apt update &amp;&amp; apt install qbittorrent-nox</span><br></pre></td></tr></table></figure>
<h3 id="设置自启动"><a href="#设置自启动" class="headerlink" title="设置自启动"></a>设置自启动</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nano /etc/systemd/system/qbittorrent.service</span><br></pre></td></tr></table></figure>

<p>填入如下内容：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=qBittorrent Daemon Service</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">User=你的用户</span><br><span class="line">ExecStart=/usr/bin/qbittorrent-nox</span><br><span class="line">ExecStop=/usr/bin/killall -w qbittorrent-nox</span><br><span class="line">Restart=always</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>

<p>使用方法：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl enable qbittorrent  #开启自启动</span><br><span class="line">systemctl start qbittorrent   #启动qb</span><br><span class="line">systemctl stop qbittorrent    #停止qb</span><br><span class="line">systemctl restart qbittorrent #重启qb</span><br></pre></td></tr></table></figure>

<p>启动后应该可以在http:&#x2F;&#x2F;你的ip:8080&#x2F;访问webui，用户名admin，密码adminadmin，登录后<br>切记修改用户名和密码！！！</p>
<h2 id="安装flexget"><a href="#安装flexget" class="headerlink" title="安装flexget"></a>安装flexget</h2><h3 id="pip安装"><a href="#pip安装" class="headerlink" title="pip安装"></a>pip安装</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apt install python3-setuptools python3-pip</span><br><span class="line">pip3 install --upgrade pip</span><br><span class="line">pip3 install flexget ##也可能是pip install，取决于你是否安装了python2.</span><br></pre></td></tr></table></figure>

<h3 id="填写flexget配置文件："><a href="#填写flexget配置文件：" class="headerlink" title="填写flexget配置文件："></a>填写flexget配置文件：</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir .flexget</span><br><span class="line">nano .flexget/config.yml</span><br></pre></td></tr></table></figure>

<p>填入以下内容：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">templates:</span><br><span class="line">  freespace:</span><br><span class="line">    free_space:</span><br><span class="line">      path: /home/star</span><br><span class="line">      space: 10240     </span><br><span class="line">  qb:</span><br><span class="line">    qbittorrent:</span><br><span class="line">      path: /home/star/Downloads/</span><br><span class="line">      host: localhost</span><br><span class="line">      port: 8080</span><br><span class="line">      username: xx</span><br><span class="line">      password: xx	  </span><br><span class="line">  size:</span><br><span class="line">    content_size:</span><br><span class="line">      min: 10000</span><br><span class="line">      max: 66666</span><br><span class="line">      strict: no</span><br><span class="line">tasks:</span><br><span class="line">  CHDbits:</span><br><span class="line">    rss: https://chdbits.co/torrentrss.php?rows=</span><br><span class="line">    verify_ssl_certificates: no</span><br><span class="line">    accept_all: yes</span><br><span class="line">    template:</span><br><span class="line">      - freespace</span><br><span class="line">      - qb</span><br><span class="line">    qbittorrent:</span><br><span class="line">      label: CHDbits</span><br><span class="line">  CMCT:</span><br><span class="line">    rss: https://hdcmct.org/torrentrss.php?rows=</span><br><span class="line">    verify_ssl_certificates: no</span><br><span class="line">    accept_all: yes</span><br><span class="line">    template:</span><br><span class="line">      - freespace</span><br><span class="line">	  - size</span><br><span class="line">      - qb</span><br><span class="line">    qbittorrent:</span><br><span class="line">      label: CMCT</span><br><span class="line">schedules:</span><br><span class="line">  - tasks: [ChDbits, CMCT]</span><br><span class="line">    interval:</span><br><span class="line">      minutes: 10</span><br></pre></td></tr></table></figure>

<p>以上配置是最简单的配置了，直接替换rss链接，就会下载10-66g之间的种子，每10分钟更新<br>一次，更多配置可以参考：</p>
<ol>
<li><a href="https://raw.githubusercontent.com/Aniverse/inexistence/968bf4ef1c92db5d53adf840ececd2e3aab97e89/00.Installation/template/config/flexget.config.yml">flexget.config.yml</a></li>
<li><a href="https://www.2dan.cc/pt/qbittorrent-flexget.html">qbittorrent配合flexget</a></li>
<li>google和百度</li>
</ol>
<h3 id="测试flexget运行"><a href="#测试flexget运行" class="headerlink" title="测试flexget运行"></a>测试flexget运行</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">flexget --test  --loglevel debug execute</span><br></pre></td></tr></table></figure>

<p>看看是不是符合你的预期？</p>
<h3 id="创建flexget系统服务运行"><a href="#创建flexget系统服务运行" class="headerlink" title="创建flexget系统服务运行"></a>创建flexget系统服务运行</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=Flexget Daemon</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=simple</span><br><span class="line">User=xx</span><br><span class="line">Group=xx</span><br><span class="line">UMask=000</span><br><span class="line">WorkingDirectory=/etc/flexget</span><br><span class="line">ExecStart=/usr/local/bin/flexget daemon start</span><br><span class="line">ExecStop=/usr/local/bin/flexget daemon stop</span><br><span class="line">ExecReload=/usr/local/bin/flexget daemon reload</span><br><span class="line">Restart=always</span><br><span class="line">RestartSec=5  ##间隔5s重启</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>

<p>其他使用与qb一致。</p>
<h1 id="重载sysemd文件"><a href="#重载sysemd文件" class="headerlink" title="重载sysemd文件"></a>重载sysemd文件</h1><p>编辑QB和flexget的systemd文件后，可以重载一下相关文件：</p>
<p><code>sudo systemctl daemon-reload</code></p>
<h2 id="安装autoremove-torrents"><a href="#安装autoremove-torrents" class="headerlink" title="安装autoremove-torrents"></a>安装autoremove-torrents</h2><p>软件来自<a href="https://tieba.baidu.com/p/5617157829?red_tag=0564171599">贴吧大神 @蛋糕机Mac</a><br><del>2018年12月31号，最新版本1.2.4，但是我发现有重复统计的bug，就一直在用1.1了。</del></p>
<h3 id="pip安装-1"><a href="#pip安装-1" class="headerlink" title="pip安装"></a>pip安装</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip install autoremove-torrents</span><br></pre></td></tr></table></figure>

<h3 id="在运行目录下建立config-yml"><a href="#在运行目录下建立config-yml" class="headerlink" title="在运行目录下建立config.yml"></a>在运行目录下建立config.yml</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nano config.yml</span><br></pre></td></tr></table></figure>

<p>填入如下内容：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">my_task: </span><br><span class="line">  client: qbittorrent</span><br><span class="line">  host: http://127.0.0.1:8080</span><br><span class="line">  username: XXX</span><br><span class="line">  password: XXX</span><br><span class="line">  strategies:</span><br><span class="line">    s1:</span><br><span class="line">      all_categories: true</span><br><span class="line">      #seeding_time: 1209600</span><br><span class="line">      seed_size:</span><br><span class="line">        limit: 1020</span><br><span class="line">        action: remove-old-seeds</span><br><span class="line">  delete_data: true</span><br></pre></td></tr></table></figure>

<p>这个设置是说，检查所有的分类，如果种子总大小超过1020G则删除较旧的种子和数据。<br>更多设置请参考<a href="https://github.com/jerrymakesjelly/autoremove-torrents/wiki">AMT-wiki</a></p>
<h3 id="测试AMT运行"><a href="#测试AMT运行" class="headerlink" title="测试AMT运行"></a>测试AMT运行</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">autoremove-torrents --view</span><br></pre></td></tr></table></figure>

<p>看看是不是符合你的预期？</p>
<h3 id="自动运行"><a href="#自动运行" class="headerlink" title="自动运行"></a>自动运行</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">crontab -e</span><br><span class="line">*/15 * * * * /home/xx/.local/bin/autoremove-torrents --conf=/home/xx/config.yml ##切记按照个人的bin和配置文件位置写</span><br></pre></td></tr></table></figure>

<p>每十五分钟运行一次，看看有没有符合条件需要删除的种子。</p>
<h2 id="监控qb和flexget的情况"><a href="#监控qb和flexget的情况" class="headerlink" title="监控qb和flexget的情况"></a><del>监控qb和flexget的情况</del></h2><h3 id="qb监控脚本"><a href="#qb监控脚本" class="headerlink" title="qb监控脚本"></a><del>qb监控脚本</del></h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nano listen-qb.sh</span><br></pre></td></tr></table></figure>

<p><del>填入：</del></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">pgrep qbittorrent &amp;&gt; /dev/null</span><br><span class="line">if [ $? -gt 0 ]</span><br><span class="line">then</span><br><span class="line">echo &quot;`date` qbittorrent is stop&quot;</span><br><span class="line">systemctl start qbittorrent</span><br><span class="line">else</span><br><span class="line">echo &quot;`date` qbittorrent running&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>

<h3 id="flexget监控脚本"><a href="#flexget监控脚本" class="headerlink" title="flexget监控脚本"></a><del>flexget监控脚本</del></h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nano listen-flex.sh</span><br></pre></td></tr></table></figure>

<p><del>填入：</del></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">pgrep flexget &amp;&gt; /dev/null</span><br><span class="line">if [ $? -gt 0 ]</span><br><span class="line">then</span><br><span class="line">echo &quot;`date` flexget is stop&quot;</span><br><span class="line">flexget daemon start -d</span><br><span class="line">else</span><br><span class="line">echo &quot;`date` flexget is running&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>

<h3 id="修改权限"><a href="#修改权限" class="headerlink" title="修改权限"></a><del>修改权限</del></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chmod 777 listen-qb.sh</span><br><span class="line">chmod 777 listen-flex.sh</span><br></pre></td></tr></table></figure>


<h3 id="定时运行"><a href="#定时运行" class="headerlink" title="定时运行"></a><del>定时运行</del></h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">crontab -e</span><br></pre></td></tr></table></figure>

<p><del>加入如下两行</del></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">*/5 * * * * /root/listen-qb.sh  &gt;/dev/null 2&gt;&amp;1</span><br><span class="line">*/5 * * * * /root/listen-flex.sh  &gt;/dev/null 2&gt;&amp;1</span><br></pre></td></tr></table></figure>

<p><del>每五分钟自动检测qb和flex是否再运行，没有则启动。</del></p>
<h2 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h2><p>2022-10-20 cron中增加<code>&gt;/dev/null 2&gt;&amp;1</code></p>
<p>2022-1-16：使用systemd来实现自动重启。</p>
<p>2021-12-21：使用pip安装art。</p>
]]></content>
      <categories>
        <category>Tutorial</category>
      </categories>
      <tags>
        <tag>qbittorrent</tag>
        <tag>flexget</tag>
        <tag>autoremove-torrents</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu重启后SSH不启动以及Syncthing更新1.0后无法启动</title>
    <url>/ubuntu-reboot-ssh-stop-syncthingv1-stop/</url>
    <content><![CDATA[<p>古老的Openvz终于露出了狰狞的獠牙，美人白发，英雄迟暮，不单单是世人看不下去，他们自己，也看不下去。。。</p>
<span id="more"></span>

<h2 id="不知道原因就再也进不去的Ubuntu"><a href="#不知道原因就再也进不去的Ubuntu" class="headerlink" title="不知道原因就再也进不去的Ubuntu"></a>不知道原因就再也进不去的Ubuntu</h2><p>Linux的用户，真的应该谨记，计算机是用来用的，不是用来折腾的，只要它还能动弹，就不要去碰它。今天闲的荒，apt upgrade出了事。。。不知道更新了什么，重启后就ssh不上了，当时服务器可以ping通，ISP的后台也能看到机器在运行，最终在ISP的后台开了online console，登上去看了下，ssh和syncthing都无法启动了，然后折腾了一下午，解决如下：</p>
<h2 id="SSH无法启动的解决"><a href="#SSH无法启动的解决" class="headerlink" title="SSH无法启动的解决"></a>SSH无法启动的解决</h2><p>‘sshd -t’后提示：<br><code>Missing privilege separation directory: /var/run/sshd</code></p>
<p>早在2006年就有人遇到过这个<a href="https://bugs.launchpad.net/ubuntu/+source/openssh/+bug/45234">问题了</a>，当时的解决办法就是，<code>rc.local, bootmisc.sh - either way, it&#39;s seems trivial enough to me (yet I managed to get my patch wrong, aaargh!) and I hope this will be fixed soon.</code> </p>
<p>比较悲伤，虽然我不知道是为啥，但十多年后我也遇到了。。。然后我又看到了<a href="https://talk.plesk.com/threads/missing-privilege-separation-directory-var-run-sshd.350438/">这个</a>,作者提问的同时也给出了解决办法：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">crontab -e</span><br><span class="line">@reboot mkdir -p -m0755 /var/run/sshd &amp;&amp; systemctl restart sshd.service</span><br></pre></td></tr></table></figure>

<p>其实就是重启强行重建这个文件夹。。简单粗暴，但在找不到原因，又不想重装的情况下，不失为一个很好的选择了。</p>
<h2 id="syncthing无法启动的解决"><a href="#syncthing无法启动的解决" class="headerlink" title="syncthing无法启动的解决"></a>syncthing无法启动的解决</h2><p>更新完syncthing的1.0版本后，无法启动了，这不是第一次发生了，这次的google终于有了些进展。</p>
<p>之前我用的systemd文件如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=Syncthing - Open Source Continuous File Synchronization for %I</span><br><span class="line">Documentation=man:syncthing(1)</span><br><span class="line">After=network.target</span><br><span class="line">Wants=syncthing-inotify@.service</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">User=%i</span><br><span class="line">ExecStart=/usr/bin/syncthing -no-browser -no-restart -logflags=0</span><br><span class="line">Restart=on-failure</span><br><span class="line">SuccessExitStatus=3 4</span><br><span class="line">RestartForceExitStatus=3 4</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>

<p>然后到github页查看发现，官方syncthing@.service的内容为：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=Syncthing - Open Source Continuous File Synchronization for %I</span><br><span class="line">Documentation=man:syncthing(1)</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">User=%i</span><br><span class="line">ExecStart=/usr/bin/syncthing -no-browser -no-restart -logflags=0</span><br><span class="line">Restart=on-failure</span><br><span class="line">SuccessExitStatus=3 4</span><br><span class="line">RestartForceExitStatus=3 4</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Hardening</span></span><br><span class="line">ProtectSystem=full</span><br><span class="line">PrivateTmp=true</span><br><span class="line">SystemCallArchitectures=native</span><br><span class="line">MemoryDenyWriteExecute=true</span><br><span class="line">NoNewPrivileges=true</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>
<p>但是用如上内容也无法启动syncthing，依旧启动失败，之后发现了如下两个issue:</p>
<ol>
<li><a href="https://github.com/syncthing/syncthing/issues/5449">#5449</a></li>
<li><a href="https://github.com/syncthing/syncthing/issues/5286">#5286</a></li>
</ol>
<p>之后把systemd文件中如下两项#掉，终于可以用了：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># SystemCallArchitectures=native</span><br><span class="line"># MemoryDenyWriteExecute=true</span><br></pre></td></tr></table></figure>
<p>issue中的对话值得深思：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@serl</span><br><span class="line">Problem is, as you can guess from my version information, I cannot update the kernel to support these options, as the machine is a OpenVZ VPS and I have no control on the hypervisor.</span><br><span class="line"></span><br><span class="line">Relates to #5286</span><br><span class="line"></span><br><span class="line">Version Information</span><br><span class="line">Syncthing Version: v1.0.0</span><br><span class="line">OS Version: Ubuntu 16.04 / Kernel 2.6.32-openvz-042stab120.18-amd64</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@calmh</span><br><span class="line">Nonetheless, you’ve solved the problem. Outdated kernels and other software will always be around, but we cannot be forever prevented from using new features.</span><br></pre></td></tr></table></figure>

<p>openvz不知道还能坚持多久？廉价vps如果没有了ovz的支持，会怎样走下去？毕竟2.6.32，真的太老了。。。</p>
]]></content>
      <categories>
        <category>ECM</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
        <tag>SSH</tag>
        <tag>openvz</tag>
      </tags>
  </entry>
  <entry>
    <title>hyper-v虚拟LEDE旁路由实现科学上网</title>
    <url>/hyper-v-lede-side-router/</url>
    <content><![CDATA[<p>事情的起因如此的简单，就是突然发现油管上给我推荐的视频都在讲软路由，点开看看。。。内容很基础，无感，但其中一个提到用旧电脑做了个旁路由，通过修改其他设备的网关来实现科学上网的，一下点燃了我的热情！</p>
<span id="more"></span>

<p>是的，最近沉迷喷射2无法自拔，9102年了，中国移动连接Nintendo是每况愈下，基本已经放弃治疗了。之前发现路由器版的UU加速器效果还行，最重要的是免费啊，嘿嘿，就用了一个月，但据说马上要收费了，本来要买的，但是测了下，发现高峰时候还是速度慢丢包啥的，实在不值，况且手里还有那么多vps闲置（此处一坑，后详解）。要是路由里自己科学上网，启用游戏模式，则会影响pt下载，太麻烦，旁路由就是完美的解决方案啊！</p>
<p>老家是有能装lede的路由器，但不在手边，等家里人找到寄过来猴年马月了。。。然后就突然看到一个词“hyper-v”，很久以前就想试试这个win10自带的虚拟机啦，正好，一起来一波吧！</p>
<h1 id="文献综述"><a href="#文献综述" class="headerlink" title="文献综述"></a>文献综述</h1><p>嗯，你没有看错，我真的觉得应该叫文献综述。。。比以前混学术下的辛苦都大啊。。。果然需求才是第一驱动力啊。</p>
<p>网络中关于hyper-v装lede的文章真的是不要太多，也有踩坑分享的，有另辟蹊径的，当然也有互相抄来抄去的。。。突然发现，互联网时代，抄袭最大的问题可能都不是不尊重版权，而是浪！费！时！间！真的等同杀人。</p>
<h1 id="安装lede"><a href="#安装lede" class="headerlink" title="安装lede"></a>安装lede</h1><p>大部分文章安装的lede，是真的要把这个虚拟路由作为拨号路由来用的，但我不是。这类文章，一般都是给lede虚拟机分配两个虚拟网卡，一个“外网”类型的做wan口，一个内网类型的来联通宿主机。主要有三篇：</p>
<ul>
<li><a href="https://www.zhiin.net/105a7cc2/">Hyper-V 部署 Lede 路由</a></li>
<li><a href="http://koolshare.cn/thread-84735-1-2.html">Hyper-V 部署LEDE X64固件全教程</a></li>
</ul>
<p>这两篇讲的都是一个事儿</p>
<ul>
<li><a href="https://blog.skk.moe/post/hyper-v-win10-lede/">在 Windows 10 上使用 Hyper-V 安装 LEDE 软路由</a></li>
</ul>
<p>这一篇解决方案差不多，区别是使用了hyper-v的第二代虚拟化，所以虚拟盘使用的gpt-uefi的，记得要去掉安全启动，否则启动不了的，据说可以提升性能。另外本篇中提到的对宿主机虚拟网卡和lede-ui中设置ip，利用30s回滚的机会进行设置的方法，有一定的实践价值。</p>
<p><em>划重点，这里我踩的坑你们估计想不到。。第一次启动虚拟后，死活找不到网卡，ifconfig返回为空，&#x2F;etc&#x2F;config&#x2F;netwrok就没有这个文件，真的是一头雾水。。最后发现，是我下载的固件出了问题！眼瞎！！那么大的汉字“虚拟盘和转盘专用”。。。</em></p>
<h1 id="理解虚拟机与宿主机的网络结构"><a href="#理解虚拟机与宿主机的网络结构" class="headerlink" title="理解虚拟机与宿主机的网络结构"></a>理解虚拟机与宿主机的网络结构</h1><p>然后就是实践本人想法的时候了，所有的文章都是一个类型，但不是我想要的，我希望虚拟机和宿主机在同一个网段下，就像真实的接入了一个旁路由，旁路由的lan口插在主路由的lan口，然后修改旁路由ip避免冲突，但与其他设备在一个网段下方便修改网关，这样就可以单独修改switch的网关设置，实现switch用lede里的软件游戏模式科学上网，而不影响其他设备。（说到这里，我突然有个想法，科学上网软件里好像有个功能叫“访问控制”？？？我天，我是不是这两天都白干了。。。答案是，yes。。。我写到这里去试了下，结果。。。:cry:，还是继续写吧）</p>
<p>要实现这个，就需要研究一下虚拟机和宿主机的网络构成到底有哪几种：</p>
<ul>
<li>桥接</li>
<li>NAT</li>
<li>host-only</li>
</ul>
<p>基本可以确认，分别对应hyper-v的：</p>
<ul>
<li>外部网络</li>
<li>内部网络</li>
<li>专用网络</li>
</ul>
<p>就理解原理而言，写的最好的一篇文章是<a href="https://yuerblog.cc/2017/01/22/understand-bridge-and-dhcp/">理解桥接bridge和dhcp</a>，非常详细解释了区别以及交换机转发的原理，通过mac地址来决定该把信号发给一个网桥（一根网线）下的宿主还是虚拟机，从源头上给出思路，推荐有兴趣的都可以看看哈。</p>
<p>就实际操作上，其实更简单，我是按照<a href="https://blog.csdn.net/sinat_36203615/article/details/77969800">Win10 Hyper-V 搭建虚拟机 桥接模式</a>做的。</p>
<p><del>我只用了随虚拟机建立的default vEthernet这个内网虚拟网卡和lan口网卡桥接就成了，并没有如文中最后所说给网桥一个ip地址。</del> 此种方法实现的桥接尽在当时有效，一旦重启则default vEthernet会再次被分配一个内网地址，需要按照NAT的方式对LEDE的网卡进行设置才能上网。<del>理论上讲</del>我猜，记录好重启前的网卡状态，通过对网卡的相应设置应该还是可以实现桥接吧？但是,折腾也要有个限度吧XD，老老实实的在桥接和NAT中选一个就好了。。。 </p>
<p>两种模式的区别一句话：桥接的网络下，物理机所在网络中的其他主机可以访问虚拟机；NAT的网络下，只有宿主机能访问虚拟机（有教程说可以通过Powershell设置转发来实现，但是。。。何必呢。。。）。</p>
<p>哈哈，就酱了。。</p>
<p>这里要说的是，桥接模式下如何控制宿主PC物理网卡的IP地址和虚拟机里LEDE的IP地址（我需要固定ip），因为桥接后，会出现一个网桥，而<del>接入网桥的设备</del>物理网卡已经没有单独设置ip的选项了。我的办法是，<del>在路由里用静态路由表确定宿主机的</del>修改网桥的ipv4设置来确定物理网卡ip地址，在虚拟机里修改&#x2F;etc&#x2F;config&#x2F;network文件里lan口的地址来确定虚拟机的ip地址。例如：宿主机为192.168.1.2，那么将虚拟机设置为192.168.1.4就可以在宿主机的浏览器访问1.4上的lede了，之后再相应设置虚拟路由的网关、dns什么的。</p>
<p>最重要的已经在刚才的一段里说完了。。。希望对看到的人有所帮助。</p>
<h1 id="如何利用这个旁路由？"><a href="#如何利用这个旁路由？" class="headerlink" title="如何利用这个旁路由？"></a>如何利用这个旁路由？</h1><p>很简单，连接到192.168.1.x下的设备，选择手动ip设置，把网关设置为192.168.1.4，两个dns，我一般填虚拟机的ip和公网的dns，我猜两个公网dns应该也是可以的。 That‘s it.</p>
<p><a href="https://instar.me/archives/e806f8ac.html">关于 N1 旁路由的设置</a>文章写的很清晰，大家可以参考。</p>
<h1 id="一些补充"><a href="#一些补充" class="headerlink" title="一些补充"></a>一些补充</h1><h2 id="其他虚拟机”内部网络”连接外网的方式"><a href="#其他虚拟机”内部网络”连接外网的方式" class="headerlink" title="其他虚拟机”内部网络”连接外网的方式"></a>其他虚拟机”内部网络”连接外网的方式</h2><p>启用物理网卡的网络共享给vEthernet，具体设置就是在物理网卡的属性界面-共享-勾选“允许其他网络用户使用此网络连接”-然后选择LEDE的那张默认虚拟卡即可。之后lede的虚拟网卡会自动设置为192.168.137.1。需要在虚拟机里把LEDE的lan口改为192.168.137.x，然后就可以访问137.x的LEDE了。共享时其实就是nat转发模式，192.168.137.1就是那个转发的路由器wan口。这个方法中，虚拟机无法更新系统或下载插件，显示“插件下载显示文件校验不一致，错误代码4”，后来发现，应该是dns的问题，给lan口那里添加了一个公网dns即可，我添加了114.114.114.114。</p>
<h2 id="外部网络设置中“允许管理操作系统共享此网络适配器“的意义"><a href="#外部网络设置中“允许管理操作系统共享此网络适配器“的意义" class="headerlink" title="外部网络设置中“允许管理操作系统共享此网络适配器“的意义"></a>外部网络设置中“允许管理操作系统共享此网络适配器“的意义</h2><p>以上实操教程，很多都提到了在什么时候勾选这个选项，什么时候去掉等等。在阅读是否勾选时win10的提示，以及数次尝试后，我觉得。勾选这个选项，应该是起到了与桥接相同的作用，至于是否能够在虚拟机内编辑设置文件将虚拟机置于宿主机的同一网段？还有待进一步测试。。。等哪天又犯贱了就去试试哈。</p>
<p>不勾这个选项，就是让虚拟机接管物理网卡，我没有照上边的例子试过，但宿主机应该是进入了虚拟路由的子网。</p>
<p><a href="https://blog.csdn.net/rrrfff/article/details/51168376">Win10下配置Hyper-V虚拟机通过NAT或桥接方式联网</a> 一文也提到了这些问题，应该与我的想法印证了。</p>
<h2 id="旁路由时关闭dhcp有所谓"><a href="#旁路由时关闭dhcp有所谓" class="headerlink" title="旁路由时关闭dhcp有所谓"></a>旁路由时关闭dhcp<em>有</em>所谓</h2><p><del>如果像我这样设置虚拟旁路由，则dhcp关闭与否应该是无所谓的，因为根本不会用到旁路由下的子网。</del></p>
<p>还是要关闭hyper-v下的dhcp的，尤其是子网不一致的时候，防止在内网抢答，新接入的设备可能被分配到不同的子网，导致断网，最近发生了惨案，用了好久搞明白原来这里出了问题。</p>
<h2 id="准备个好点的酸酸乳。。。"><a href="#准备个好点的酸酸乳。。。" class="headerlink" title="准备个好点的酸酸乳。。。"></a>准备个好点的酸酸乳。。。</h2><p>全都设置好了，又折腾了一个多小时，手机、switch什么的改了网关为虚拟路由器的ip，就是不能上外网。。。真的是绝望了，什么鬼啊。。。准备放弃的时候，用买的机场的酸酸乳试了下。。。功成。。。</p>
<p>妈的，自己的线路能烂成这样，也是奇迹啊。。。当然有可能是因为自己的只做了ss，被干扰的太厉害了？</p>
<p>后来再次测试自己的服务器，还有连上了，速度很快，但switch的nat type竟然是D。。。呵呵了，一开始以为是v2ray构建ss的锅，后来发现不是这样滴。。。同样的建立的其他服务器有a有b的。唉真的古怪。但也就这样吧！</p>
<p>补充1石锤：用软件中心的v2ray的游戏模式，switch的nat全是D，所以，应该是它的锅吧。。</p>
<p>补充2：我的北京移动，感觉甚至能够干扰酸酸乳的http-simple了，本来为了减少延迟，没有用tls，然后玩儿喷射，5把掉了3把，换了tls的混淆，终于正常打了半小时，但。。。还是掉了一次，唉。</p>
<h2 id="桥接、ip动态伪装、防火墙设置-2022-11-30"><a href="#桥接、ip动态伪装、防火墙设置-2022-11-30" class="headerlink" title="桥接、ip动态伪装、防火墙设置-2022.11.30"></a>桥接、ip动态伪装、防火墙设置-2022.11.30</h2><p>研究这事这么久了，来个了断？</p>
<h3 id="1-是否需要桥接？"><a href="#1-是否需要桥接？" class="headerlink" title="1.是否需要桥接？"></a>1.是否需要桥接？</h3><p><strong>交换机</strong>：工作在数据链路层，原理等同于多端口网桥。 作用是连接数个相同网段的不同主机，减少网内冲突，隔离冲突域。 利用存储转发和过滤技术来从物理上分割网段</p>
<p>在接口页面-物理设置中，不勾选桥接时，接口为圆点，只能单选；勾选桥接时，可以多选。</p>
<p>可以把，<code>桥接</code>，想象成没有管理系统的傻瓜交换机，桥接一个物理端口，就是在傻瓜路由器拉出一条线连接那个物理端口，每个网口的状态，由桥接的上游决定。比如，从路由接出来的交换机，接到交换机上的设备分配的ip来自路由器的dhcp，交换机相当于给路由器多加了几个网口插孔。当这个网桥在LAN域之下，那么与之桥接的物理端口也就都是lan口了。</p>
<p>这个<a href="https://www.right.com.cn/forum/thread-4031598-1-1.html">文章</a>有一些关于桥接的讨论，摘录部分如下：</p>
<blockquote>
<p>现在有2个疑问<br>1,笔记本刷的op固件作旁路由,很多人说旁路由要取消lan的桥接接口选项,实际使用的时候,取不取消没感觉到有啥影响,都能正常上网和扶手工竹梯子.<br>2,极路由3刷的openwrt固件, 只要一取消lan的桥接接口选项(默认的是eth0和无线网卡被勾上了),这个硬路由通过网线连lan口的方式马上就不能登录了, 这时候只能重置路由器了</p>
</blockquote>
<blockquote>
<p>这个桥接应该是用于多网口的的软路由，比如8口软路由，一个wan口，另外7个桥接成lan口，我是这样理解的</p>
</blockquote>
<blockquote>
<p>同意，就是开启桥接后，单选变成多选，多个网卡复用一个逻辑链路，把多个网卡数据流汇合到一起作为LAN处理，取消过后就只能单选，只能用一个网卡作为LAN接出口，那么一个LAN口作为接出，一进一出，局域网LAN交换数据</p>
</blockquote>
<blockquote>
<p>PENWRT基于LINUX，来源于电脑系统。LAN和WAN是指不同的防火墙分区（就像WINDOWS链接一个网络后让你选是连接到什么网络一个意思，但LINUX的防火墙分区概念原早于WIN）。而防火墙分区和物理网口既有关系又有很大的区别。一个物理网口可以通过VLAN划分绑定不同的防火墙分区，一个防火墙分区可以绑定多个物理网口。在路由系统里会针对不同的防火墙分区有不同的规则，而你还可以把LAN同时当做一个虚拟网卡来进行IP地址设置以及其他管理。</p>
<p>OPENWRT默认物理网口绑定到LAN区域（也就是桥接），而LAN区域默认拥有路由远程管理权限。但在单臂路由时，由于一个物理网口同时要收发WAN区域流量和LAN区域流量，所以物理网口（eth0）需要取消桥接LAN。在eth0取消桥接LAN后，由于LAN区域已经不再有实际物理网口绑定，原虚拟网卡LAN的地址自动赋值给物理网口eth0，所以并不妨碍我们远程管理路由。但硬路由LAN桥接的eth0网卡有四个子接口（eth0.1-eth0.4），在取消桥接LAN后系统无法给4个子网卡自动设置IP，网卡没有设置IP，所以我们就不能远程管理路由了</p>
<p>旁路由其实并不是传统意义上的路由，可以看做传统意义的V-P：N服务器，他只是作为一个服务器存在，所以他的防火墙区域主要是LAN和Vp?n，而V-P&#x2F;N区域都是基于软件的，接口都是虚拟的，所以一般不会和LAN区域所桥接的接口有什么冲突。</p>
<p>在不桥接LAN接口的情况下，所有的数据包都需要通过程序判断识别为是LAN还是WAN数据包，然后再进一步处理，这会一定程度加重CPU负担，所以可能会有卡顿现象（CPU性能越弱就越明显）。而使用VLAN标识后可以很好解决这种现象，让网络拓扑更清晰，这也是单臂路由推荐的方式，只是需要管理型交换机才能完成。</p>
</blockquote>
<blockquote>
<p>视频UP主大多也只是知其然<br>不知道您明白了没有，桥接最简单的理解就是把选中的物理接口（其实也包括系统的虚拟接口）看作是一个接口，也就是看作是openwrt这里添加的接口，通常会被叫做lan口<br>换句话说假如您有4个网口，第一个作为wan口，后面三个桥接作为lan口，您的PC插后面三个哪个都是一样的，假如您的设备可以开WIFI热点，那么WIFI热点也可以被认为是一个物理接口与其他三个口桥接到lan中，那么连接了WIFI的设备也如同网线直接接到lan上一样，他们可能会被分配同一网段的ip、同样的网关、dns和掩码等等<br>之所以您单网口旁路由桥接与否都可以使用想必您到这里也明白了吧，也就是一个网口桥接不桥接也没有变化，一个网口看作一个网口还是一个网口哈哈哈哈哈<br>但是需要注意的是单臂路由中一个网口桥接与否可能是有一定区别的，具体可以了解一下单臂路由的原理</p>
</blockquote>
<blockquote>
<p>我的理解是桥接的意思是，比如在lan口上，打勾的的那些口互相之间可以通。按道理就算不是单臂路由，在不用vlan的情况下，就算不桥接，电脑直接连上去应该也能进后台。楼主进不了应该就是vlan交换机的设置，导致进后台只能从eth0.1进，如果只勾eth0当然就进不了后台，因为不桥接的话它和eth0.1不通，如果只勾选eth0.1不桥接应该也能进后台</p>
</blockquote>
<blockquote>
<p>说一下我对桥接模式的理解;<br>理论上,桥接就是二层交换机.设为桥接,就是说虚拟出来一个交换机,把这个网口挂上去. 所以设置成桥接后,可选多个网口,这样相当与在内部,多个网口直连到同一个交换机上.<br>取消桥接后,每个接口都可以理解成一个三层口,你只有直连这个三层口,配上ip才能访问. 其他口都是相互独立的.所以连不上了.</p>
<p>但是为何做旁路由都在强调取消桥接呢? 有的人说不取消也没事.有的人却强调取消. 我也是实验中发现一个其中的原因.</p>
<p>先说结论: 这里的桥接和普通意义交换机有不同.因为它会arp劫持. 劫持非桥接网段的其他网段ip. 你要细品.再细品,不信就试试看.<br>举个例子:<br>家用互联网.一般不做vlan划分,如果同一个网络中使用两个不同网段ip. 比如上网的是192.168.1.0&#x2F;24 家里的监控不联网,摄像头硬盘录像机使用192.168.2.0&#x2F;24.<br>肯定有人说为啥不单独走线,两个网段在同一个网络中,ip广播怎么办.这些都不是一般用户考虑的事情.本身设备也不多呀. 但是当挂上openwrt后.故事就这样开始了.<br>openwrt lan口开桥接模式.ip 192.168.1.2&#x2F;24 ,然后并到主网络中. 好吗,你会发现摄像头登录不上了. 不信邪.尝试改本机的ip为192.168.2.0&#x2F;24 直连摄像头.可提示ip冲突. (winxp 会无法设置ip,ip会空. win7以上系统可以设置.单会提示ip冲突. )换个ip同样如此.<br>去openwrt看一下,发现arp出现了问题. 电脑设置的ip地址会备绑定在一个随机的mac上.所以才会提示ip冲突. 我只好把它理解成arp劫持. 它的网桥就是默认开启了这个功能.<br>如果网络中只有这一个网段,我所谓.但是要有其他网段.必须要关闭桥接模式.</p>
</blockquote>
<p>无法判断那个下边说的劫持是否为真，不过我有遇到过虚拟机里的openwrt没有关dhcp，还是一个不同的网段（192.168.0.x），会在内网中抢答给新接入的设备分配到非192.168.1.x的地址，导致不能工作。</p>
<p><strong>结论：单口的路由，虚拟旁路有，关闭与否没关系。但，不过点一下的事么，解除绑定吧。</strong></p>
<h3 id="2-是否需要开启ip动态伪装或者防火墙规则设置？"><a href="#2-是否需要开启ip动态伪装或者防火墙规则设置？" class="headerlink" title="2.是否需要开启ip动态伪装或者防火墙规则设置？"></a>2.是否需要开启ip动态伪装或者防火墙规则设置？</h3><p>不开启的主要表现是，可以上外网，但不能上内网。</p>
<p>有的<a href="https://www.right.com.cn/forum/thread-7817323-1-1.html">帖子</a>讨论中指出，不同的翻墙软件有可能导致不同的结果。比如openclash不需要，但ssrplus和passwall（我的常用）需要。</p>
<p>另外，还有说不同的主路由也可能影响是否需要开启。</p>
<p>一些有用的讨论摘录如下：</p>
<blockquote>
<p>因为旁路由处理过后，ip变了，一个mac对应两个ip</p>
</blockquote>
<blockquote>
<p>别纠结了，不需要科学的设备直接通过主路由，需要科学的话，伪装不伪装的都一样。这个伪装有的说需要有的说不需要应该和主路由有关，我的旁路由只要设置好lan的网关和dns就可以了其它不用设置</p>
</blockquote>
<blockquote>
<p>开不开动态伪装，和使用那种代理工具也有关系</p>
<p>我主路由是TP-LINK的，负责dhcp，dns默认不填。<br>旁路由使用OpenClash的话，旁路由的dns不填，也不用打开动态伪装，国内外一切正常。<br>旁路由使用s-s-r  p+的话，要开动态伪装，且旁路由要设dns（可以公共也可以是主路由的），不然外国可以上网，国内无法上网。</p>
<p>我的结论就是：不仅要看使用什么品牌的主路由，而且还要看使用什么代理工具，使用OpenClash不用开动态伪装，其他代理工具估计都有要开，至少s-s-r  p+需要开，其他代理工具我没测，估计要开吧</p>
</blockquote>
<blockquote>
<p>这个我也不知道，反正是我在使用过程中偶然发现小猫咪可以不用开动态伪装的。。。<br>可能小猫咪拿到更高权限吧，比如dns劫持（所以旁路由和主路由都不用另外设置dns）和包括类似动态伪装之类的权限吧</p>
<p>反正小猫咪也好用，规则细致，切换节点和规则也很方便，所以不开动态伪装这个问题算是间接的解决了。。</p>
</blockquote>
<p>还有个<a href="https://www.jianshu.com/p/e7ccb32c0462">文章</a>讨论了ip动态伪装与mss钳制：</p>
<blockquote>
<p><strong>ip动态伪装的英文是masq，即MASQUERADE，所以就是WAN口的nat设置。</strong></p>
</blockquote>
<p>这句话很有意思，当局域网的其他设备把网关改为openwrt的ip时，相当于接入了这个lan网桥，还是个没有开启nat的网桥，所以没有办法做地址转换实现联通。</p>
<p>另一个想法是，其他设备实际上与这个oepnwrt在一个子网的，不开启的时候，即使网关改为openwrt，地址转化还是受到主路由的影响，所以会有奇怪的不通现象吧。</p>
<p><strong>结论：还是要开的。。。</strong></p>
<h2 id="防火墙规则-2022-11-29"><a href="#防火墙规则-2022-11-29" class="headerlink" title="防火墙规则-2022.11.29"></a><del>防火墙规则-2022.11.29</del></h2><h3 id="方法一-推荐）："><a href="#方法一-推荐）：" class="headerlink" title="方法一(推荐）："></a><del>方法一(推荐）：</del></h3><p><del>接口：删除vpn，wan等接口，只保留lan，当然如果装了docker，那个端口也是需要的</del></p>
<p><del>防火墙：不用管了，自己会变成lan&#x3D;&gt;accept</del></p>
<h3 id="方法二："><a href="#方法二：" class="headerlink" title="方法二："></a><del>方法二：</del></h3><p><del>接口：lan口取消桥接  据说不取消会导致局域网广播影响性能，ref-7</del></p>
<p><del>防火墙中设置：lan &#x3D;》wan&#x2F;vpn 开启IP动态伪装</del></p>
<p><del>这种方法应该是与网络防火墙的那个自定义规则是等效的。</del></p>
<h2 id="防火墙规则2021-6-9"><a href="#防火墙规则2021-6-9" class="headerlink" title="防火墙规则2021.6.9"></a><del>防火墙规则2021.6.9</del></h2><p><del>最近手贱，想直接升级，又搞了一次hyper-v</del></p>
<p><del>最终是去掉桥接的同时iptables -t nat -I POSTROUTING -o eth0 -j MASQUERADE 起了作用，可以访问国内了。可能与我本次没有删除多余的wan口有关</del></p>
<p><del>就利用softehter组建内部局域网有了一些心得，另文讨论吧。</del></p>
<p><del>只启用虚拟dhcp的尝试，出口ip的设置，ip区间的设置。</del></p>
<h2 id="防火墙规则2020-11-5"><a href="#防火墙规则2020-11-5" class="headerlink" title="防火墙规则2020.11.5"></a><del>防火墙规则2020.11.5</del></h2><p><del>不知道从什么时候起，旁路由需要添加防火墙规则了，否则要么不能用，要不只能用外网。具体措施两种：</del></p>
<p><del>方法一：</del></p>
<p><del>如果用这个固件做旁路由的话不要忘了加自定义防火墙规则（网络-&gt;防火墙-&gt;自定义规则）：</del><br><del>iptables -t nat -I POSTROUTING -o eth0 -j MASQUERADE</del><br><del>也可以尝试（有桥接存在的情况下）</del><br><del>iptables -t nat -I POSTROUTING -o br-lan -j MASQUERADE</del> </p>
<p><del>方法二：</del></p>
<p><del>到网络-防火墙-自定义规则添加iptables -t nat -I POSTROUTING -j MASQUERADE这一句后重启防火墙</del><br><del>网络-接口-LAN-修改-物理设置-桥接接口不勾选。</del></p>
<p><del>原理解释？：</del></p>
<p><del>1 、加上那那条 就是做旁路由+nat转换，如果这台N1再做fq的话，N1的负载会增大，至于NAT与fq会不会有影响就不清楚。</del><br><del>2、不加上那条 N1就是旁路由，不做nat，做纯ip路由转发，路径是出去访问的包会经过N1-出口路由器，回包是直接原路由器转发过来，不经过N1的，对于fq的路径是是没有影响的。fq出去的数据包源ip是N1的eth0的地址，回包也是回到N1,解密后在转发出来到客户端。</del></p>
<p>以上。。。</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="http://www.cnblogs.com/ayanmw/p/3264082.html">http://www.cnblogs.com/ayanmw/p/3264082.html</a></li>
<li><a href="http://www.cnblogs.com/elvis0123/articles/2006771.html">http://www.cnblogs.com/elvis0123/articles/2006771.html</a></li>
<li><a href="http://www.cnblogs.com/ggjucheng/archive/2012/08/19/2646007.html">http://www.cnblogs.com/ggjucheng/archive/2012/08/19/2646007.html</a></li>
<li><a href="http://www.cnblogs.com/zhourourou/p/5210477.html">http://www.cnblogs.com/zhourourou/p/5210477.html</a></li>
<li><a href="https://www.right.com.cn/forum/forum.php?mod=viewthread&tid=3354745&page=1">https://www.right.com.cn/forum/forum.php?mod=viewthread&amp;tid=3354745&amp;page=1</a></li>
<li><a href="https://koolshare.cn/forum.php?mod=redirect&goto=findpost&ptid=166096&pid=2114362">https://koolshare.cn/forum.php?mod=redirect&amp;goto=findpost&amp;ptid=166096&amp;pid=2114362</a></li>
<li><a href="https://youtu.be/jXMgAz_GQxI?list=RDCMUCOhkliOps3IS48ly-MgPC2A&t=1741">https://youtu.be/jXMgAz_GQxI?list=RDCMUCOhkliOps3IS48ly-MgPC2A&amp;t=1741</a></li>
<li><a href="https://www.right.com.cn/forum/thread-4031598-1-1.html">lan物理设置中的桥接接口到底怎么用-软路由,x86系统,openwrt(x86),Router OS 等-恩山无线论坛 (right.com.cn)</a></li>
<li><a href="https://www.right.com.cn/forum/thread-7817323-1-1.html">openwrt旁路由该如何设置？（动态伪装相关）-OPENWRT专版-恩山无线论坛 (right.com.cn)</a> </li>
<li>[<a href="https://openwrt.org/zh/docs/guide-developer/networking/network.interfaces">OpenWrt Wiki] Linux 网络接口(Network Interfaces)</a></li>
<li><a href="https://einverne.github.io/post/2017/03/openwrt-settings-and-tips.html">Openwrt 接口及基本设置 | Verne in GitHub (einverne.github.io)</a></li>
<li><a href="https://www.jianshu.com/p/e7ccb32c0462">openwrt避坑指南1：IP动态伪装和MSS钳制 - 简书 (jianshu.com)</a></li>
</ol>
]]></content>
      <categories>
        <category>Tutorial</category>
      </categories>
      <tags>
        <tag>win10</tag>
        <tag>hyper-v</tag>
        <tag>lede</tag>
        <tag>lean</tag>
      </tags>
  </entry>
  <entry>
    <title>p20 pro以及其他异形屏使用windows远程桌面rdp鼠标定位不准错位的临时解决</title>
    <url>/p20-pro-rdp-mouse-pointer-wrong-position/</url>
    <content><![CDATA[<p>p20 pro什么都好，但有件事一直困扰着我，那就是在window remote desktop app下连接远程pc，鼠标在画面中的位置和点击位置不一致，且横屏状态下，越靠近右侧，漂移幅度越大。</p>
<p>具体表现举例，想要关闭窗口，鼠标需要在最小化按钮附近才能点到关闭按钮。</p>
<p>推断是因为刘海屏拉伸所导致的，但是关闭刘海屏幕显示，关闭软件拉伸都没有解决问题。</p>
<p>在这个即将发售，我准备去强p30 pro的日子，说说怎么解决这个问题吧。。。</p>
<span id="more"></span>

<h2 id="来源"><a href="#来源" class="headerlink" title="来源"></a>来源</h2><p>偶然机会，在google market搜了下rdp，在评论中看到了这个解决方案，其中提到他是在酷安的评论里看到的，我去膜拜点了个赞，真的是从心底感谢啊。因为我发现，店里的<br>p30 pro还存在这个问题的，都影响我换手机的动力啦，哈哈哈。</p>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>很简单：</p>
<ol>
<li>开启屏幕自动旋转</li>
<li>打开RD Client</li>
<li>让APP自动旋转为横屏</li>
<li>选择合适的分辨率</li>
<li>请开始你的表演 :smile:</li>
</ol>
<p>以上。</p>
]]></content>
      <categories>
        <category>ECM</category>
      </categories>
      <tags>
        <tag>p20pro</tag>
        <tag>rdp</tag>
      </tags>
  </entry>
  <entry>
    <title>fdisk与df显示磁盘大小不一致的解决办法</title>
    <url>/diff-result-fdisk-df/</url>
    <content><![CDATA[<p>昨天重装了一个vps，用了ubuntu18.04，踩了一下午的netplan坑，又发现，磁盘空间货不对板。google一下找到了解决方案。</p>
<span id="more"></span>

<p>很简单，这个问题一般是因为文件系统和分区大小不一致导致的。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">resize2fs /dev/sda1</span><br></pre></td></tr></table></figure>

<p>即可解决问题。</p>
<p><code>resize2fs</code>使文件系统<code>filesystem</code>与<code>partition</code>保持一致从而提升空间。</p>
<p>ref: <a href="https://unix.stackexchange.com/questions/10776/why-are-partition-size-and-df-output-different">Why are partition size and df output different?</a></p>
]]></content>
      <categories>
        <category>Tutorial</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>php优化设置</title>
    <url>/php-optimize-setting/</url>
    <content><![CDATA[<p>之前折腾个人的小破站，搜集了不少各路“优化”设置，放在这里，以备不时之需啦。</p>
<span id="more"></span>

<p>[toc]</p>
<h1 id="unix-socket还是tcp-sock？"><a href="#unix-socket还是tcp-sock？" class="headerlink" title="unix socket还是tcp sock？"></a>unix socket还是tcp sock？</h1><h2 id="TCP-socket"><a href="#TCP-socket" class="headerlink" title="TCP socket"></a>TCP socket</h2><ol>
<li><p>编辑&#x2F;etc&#x2F;nginx&#x2F;sites-available&#x2F;default：</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">location ~ \.php$ &#123;</span><br><span class="line">	  index index.php index.html index.htm;</span><br><span class="line">	  include /etc/nginx/fastcgi_params;</span><br><span class="line">	  fastcgi_pass 127.0.0.1:9000;</span><br><span class="line">	  fastcgi_index index.php;</span><br><span class="line">	  include fastcgi_params;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li>
<li><p>编辑&#x2F;etc&#x2F;php5&#x2F;fpm&#x2F;pool.d&#x2F;<a href="http://www.conf中的参数listen：">www.conf中的参数listen：</a></p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">listen=127.0.0.1:9000</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="unix-socket"><a href="#unix-socket" class="headerlink" title="unix socket"></a>unix socket</h2><ol>
<li><p>创建socket接口位置</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo touch /dev/shm/fpm-cgi.sock</span><br><span class="line">sudo chown www-data:www-data /dev/shm/fpm-cgi.sock</span><br><span class="line">sudo chmod 666 /dev/shm/fpm-cgi.sock</span><br></pre></td></tr></table></figure>

<p> dev&#x2F;shm目录是所谓的tmpfs，是RAM可以直接使用的区域，读写速度会快一些。</p>
</li>
<li><p>编辑&#x2F;etc&#x2F;php5&#x2F;fpm&#x2F;pool.d&#x2F;<a href="http://www.conf中的参数：">www.conf中的参数：</a></p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">listen=/dev/shm/fpm-cgi.sock</span><br><span class="line"></span><br><span class="line">; Set listen(2) backlog. A value of &#x27;-1&#x27; means unlimited.</span><br><span class="line">; Default Value: 128 (-1 on FreeBSD and OpenBSD) </span><br><span class="line">; 内存积压，默认是128，并发高了之后就会报错,根据自己内存设置</span><br><span class="line">listen.backlog = 128</span><br></pre></td></tr></table></figure>
</li>
<li><p>编辑&#x2F;etc&#x2F;nginx&#x2F;sites-available&#x2F;default：</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">location~\.php$&#123;</span><br><span class="line">	  indexindex.phpindex.htmlindex.htm;</span><br><span class="line">	  include/etc/nginx/fastcgi_params;</span><br><span class="line">	  fastcgi_passunix:/dev/shm/fpm-cgi.sock;</span><br><span class="line">	  fastcgi_indexindex.php;</span><br><span class="line">	  includefastcgi_params;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改&#x2F;etc&#x2F;sysctl.conf配置，提高内核级别的并发连接数</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">	net.core.somaxconn = 2048</span><br><span class="line"></span><br><span class="line">	sudo sysctl -p</span><br><span class="line">	````</span><br><span class="line"></span><br><span class="line">5. 重启nginx和php-fpm</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 两种区别</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">从原理上来说，unix socket方式肯定要比tcp的方式快而且消耗资源少，因为socket之间在nginx和php-fpm的进程之间通信，而tcp需要经过本地回环驱动，还要申请临时端口和tcp相关资源。</span></span><br><span class="line">当然还是从原理上来说，unix socket会显得不是那么稳定，当并发连接数爆发时，会产生大量的长时缓存，在没有面向连接协议支撑的情况下，大数据包很有可能就直接出错并不会返回异常。而TCP这样的面向连接的协议，多少可以保证通信的正确性和完整性。</span><br><span class="line">当然以上主要是半懂不懂的理论分析加主观臆测，具体的差别还是要通过测试数据来说话，以后有空，会进行这方面的测试。从网上别人博客的测试数据，我的理论分析差不多是对的。至于你选择哪种方式，我只能说“鱼和熊掌不可兼得也”，通过高超的运维和配置技巧，在性能和稳定性上做一个平衡吧。</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">楼主，你确定socket比tcp要好吗？我之前也是这么认为的，但是今天做压测的时候就发现tcp比socket稳定多了 同样的并发，超过某个数量的时候，socket就一直报：connect()to unix:/dev/shm/php55-socket failed (11: Resource temporarily unavailable。。。报错率大概是15%的样子，但是查看一些资料发现，tcp比socket这方面稳定，故改tcp，发现基本没有报错了。同样的并发下，起码出现502的几率相对减少，所以我还是改tcp了。</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">php-fpm进程数的优化 [php-fpm进程数设置多少合适](https://zhuanlan.zhihu.com/p/94627701)</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 了解参数</span></span> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">需要了解的参数是：pm、pm.max_children、pm.start_servers、pm.min_spare_servers、pm.max_spare_servers。</span><br><span class="line"></span><br><span class="line">pm：表示使用那种方式，有两个值可以选择，就是static（静态）或者dynamic（动态）。</span><br><span class="line"></span><br><span class="line">在更老一些的版本中，dynamic被称作apache-like。这个要注意看配置文件的说明。</span><br><span class="line"></span><br><span class="line">下面5个参数的意思分别为：</span><br><span class="line"></span><br><span class="line">```shell</span><br><span class="line">pm = dynamic 如何控制子进程，选项有static和dynamic    </span><br><span class="line">pm.max_children：静态方式下开启的php-fpm进程数量    </span><br><span class="line">pm.max_requests：php-fpm子进程能处理的最大请求数    </span><br><span class="line">pm.start_servers：动态方式下的起始php-fpm进程数量</span><br><span class="line">pm.min_spare_servers：动态方式下的最小php-fpm进程数</span><br><span class="line">pm.max_spare_servers：动态方式下的最大php-fpm进程数量</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h2><p>如果dm设置为 static，那么其实只有pm.max_children这个参数生效。系统会开启设置数量的php-fpm进程。</p>
<p>如果dm设置为 dynamic，那么pm.max_children参数失效，后面3个参数生效。</p>
<p>系统会在php-fpm运行开始 的时候启动pm.start_servers个php-fpm进程，</p>
<p>然后根据系统的需求动态在pm.min_spare_servers和pm.max_spare_servers之间调整php-fpm进程数。</p>
<p>在高并发场景（我们公司是一万并发测试）中，一般都是采用的static方式，因为一般来说我们的服务器都是有严格的业务分离，fpm服务器就是用来作为fpm服务器使用，除去还有一个nginx之外，不会去考虑有其他的服务器占用资源。</p>
<p>在php的运行中，无非是两种场景</p>
<ol>
<li>大运算的场景，即 php程序需要用大量的cpu资源来进行数据计算之类的操作，在这种场景下，fpm进程可以设置为cpu数量的一倍或者两倍</li>
<li>高io场景，php的使用场景中（最起码是本电商场景中）基本上属于高io，因为程序花了大量的时间在等待redis返回等待数据库返回。高io场景下，因为cpu大多处在wa状态下，所以可以尽量的加大fpm进程数，所以这个时候使用内存&#x2F;30m是更为合理的</li>
</ol>
<p>经过我们自己真实压测，大量redis和mysql读写的io密集情况下，16G的内存，fpm我们设置为400个的时候qps比fpm 16个 32个要好不少</p>
<h1 id="php-ini调优"><a href="#php-ini调优" class="headerlink" title="php.ini调优"></a>php.ini调优</h1><h2 id="内存"><a href="#内存" class="headerlink" title="内存"></a>内存</h2><p>php.ini中的 memory_limit设置用于设定单个 PHP 进程可以使用的系统内存最大值。</p>
<h2 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">file_uploads = 1</span><br><span class="line">upload_max_filesize = 10M</span><br><span class="line">max_file_uploads = 3</span><br></pre></td></tr></table></figure>

<p>默认情况下，PHP允许在单次请求中上传20个文件，上传的文件最大为2MB，这里为单次请求最多只能上传3个文件，每个文件最大为10MB，这个值不要设置太大，否则会出现超时。</p>
<p>如果非要上传大文件，Web 服务器的配置也要做相应调整。除了在 php.ini 中设置之外，还要调整 Nginx 虚拟主机配置中的 client_max_body_size 设置。</p>
<h2 id="最长执行时间"><a href="#最长执行时间" class="headerlink" title="最长执行时间"></a>最长执行时间</h2><p>最长执行时间</p>
<p>php.ini 文件中的 max_execution_time 用于设置单个 PHP 进程在终止之前最长可运行时间。这个设置默认是 30 秒，建议将其设置为 5 秒：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">max_execution_time = 5</span><br></pre></td></tr></table></figure>

<p>在 PHP 脚本中可以调用 set_limit_time() 函数覆盖这个设置。</p>
<h1 id="Ref"><a href="#Ref" class="headerlink" title="Ref:"></a>Ref:</h1><ul>
<li><p><a href="https://blog.csdn.net/pcyph/java/article/details/46513521">nginx和php-fpm通信使用unix socket还是TCP，及其配置</a></p>
</li>
<li><p><a href="https://zhuanlan.zhihu.com/p/94627701">php-fpm进程数设置多少合适</a></p>
</li>
<li><p><a href="https://blog.csdn.net/dtfly520/article/details/76849855">php.ini 配置调优 —— 让 PHP 应用性能维持在更高水平</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>Tutorial</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>为Github桌面客户端登录与添加代理</title>
    <url>/github-desktop-proxy/</url>
    <content><![CDATA[<h1 id="为github-dekstop客户端添加代理"><a href="#为github-dekstop客户端添加代理" class="headerlink" title="为github dekstop客户端添加代理"></a>为github dekstop客户端添加代理</h1><p>在<code>C:\users\用户名\</code>下找到<code>.gitconfig</code>文件，在其中添加：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[http]</span><br><span class="line">proxy = socks5://127.0.0.1:1080</span><br><span class="line">[https] </span><br><span class="line">proxy = socks5://127.0.0.1:1080</span><br><span class="line">[git]</span><br><span class="line">proxy = socks5://127.0.0.1:1080</span><br></pre></td></tr></table></figure>

<h1 id="github-desktop网页登录认证无反应"><a href="#github-desktop网页登录认证无反应" class="headerlink" title="github desktop网页登录认证无反应"></a>github desktop网页登录认证无反应</h1><p>经过搜索与测试，可以判定是反广告插件的锅，关了uBlock后即可登录了</p>
<span id="more"></span>

<h1 id="Ref"><a href="#Ref" class="headerlink" title="Ref:"></a>Ref:</h1><p><a href="https://kassadin.moe/2019/07/17/003-how-to-set-proxy-for-Github-desktop/">笔记：如何给Github Desktop设置代理</a></p>
<p><a href="https://stackoverflow.com/questions/38615168/how-can-i-configure-github-desktop-windows-to-work-with-a-proxy?rq=1">How Can I Configure GitHub Desktop&#x2F;Windows to Work with a Proxy?</a></p>
<p><a href="https://www.jianshu.com/p/8e9af3a1b231">X先生说：通过 SS 代理加快 GitHub Clone 速度</a></p>
]]></content>
      <categories>
        <category>Tutorial</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>又一个Win10安装hexo及主题的记录</title>
    <url>/hexo-installation-and-next-themes/</url>
    <content><![CDATA[<p>网上这样的垃圾帖子估计没上万，但上千总有的吧，为什么我又搞一篇出来？</p>
<p>这个问题问的好，其他写类似主题的人中有不少也应该想过这个问题，最终还是决定要写自己的一篇。除了专门为了生产垃圾信息的<del>AI</del>人以外，剩下的，应该都是遇到了”奇怪的问题”，最终觉得还是有必要写出来记录下。</p>
<p>这种想法在我过去六年接触Linux开始，体会是越来越深。Linux开源的系统赋予程序员么近乎无限的自由，但无助于解决碎片化的问题。特别是当涉及缺乏利益驱动的免费开源程序时，当“爱”用尽时，自然留下了烂摊子。</p>
<p>即使不是烂摊子，那些相互之间的依赖，嵌套着的程序，对于最终使用者来说，在不同的环境下，还是会遇到开发者们感觉“匪夷所思”的问题。</p>
<p>怎么办？</p>
<p>写到这里再想想，可能所有教程都会遇到上边的问题吧，只是在Linux这个平台上，这这样的情况相对突出一些罢了。</p>
<p>根本原因在于这种比较复杂麻烦的事，必须做，但不需要经常做，但只做一次最终肯定会忘，而忘记了必然有一天需要还的，怎么办？<strong>写个教程教未来的自己吧！着重记录原理，提及踩的坑，下次可以立即上手就好。</strong></p>
<p>本着这样的精神，以下开始教程啦：</p>
<span id="more"></span>

<h1 id="1-hexo的运行基础"><a href="#1-hexo的运行基础" class="headerlink" title="1. hexo的运行基础"></a>1. hexo的运行基础</h1><p>hexo作为一个JS程序，想跑起来，根据官网，至少需要Node.js和Git，下载安装即可，我用的LTS版本。Node.js安装时还会安装chocolatey，记得机器科学上网，当然，即使科学了，用时也很长。为了节省时间，装好了赶紧蹭蹭首富的光吧。</p>
<p>切换npm镜像地址的程序：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm --registry https://registry.npm.taobao.org install node-red-contrib-composer@latest #临时使用淘宝源</span><br><span class="line"></span><br><span class="line">npm config set registry https://registry.npm.taobao.org #全局配置切换到淘宝源</span><br><span class="line"></span><br><span class="line"># npm config set registry http://www.npmjs.org #全局配置切换到官方源</span><br><span class="line"></span><br><span class="line">npm info hexo-cli #检测是否切换到了淘宝源</span><br></pre></td></tr></table></figure>

<p>如果安装过程中没有选择windows组件，那么安装node.js后可以在管理员权限下的PowerShell中输入<code>npm install -g windows-build-tools</code></p>
<p>也可以自己安装，<a href="https://github.com/nodejs/node-gyp">相关教程</a></p>
<h1 id="2-安装hexo"><a href="#2-安装hexo" class="headerlink" title="2. 安装hexo"></a>2. 安装hexo</h1><p>使用Node.js的包管理器安装</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>

<p><strong>注意！是<em>hexo-cli</em>，不是hexo！！</strong></p>
<p><code>-g</code>这个扩展表示把hexo安装成为全局程序，使命令行全局可用<code>hexo</code>命令。用<code>-S</code>则不能，另外powershell不行，用cmd吧。此时hexo是安装在全局预设目录下，而不是当前的项目文件夹下。</p>
<p>此外，相应的还有如下几种选择：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install X -g</span><br><span class="line">安装模块到全局，不会在项目node_modules目录中保存模块包。</span><br><span class="line">不会将模块依赖写入devDependencies或dependencies 节点。</span><br><span class="line">运行 npm install 初始化项目时不会下载模块。</span><br><span class="line">具体想知道装在哪里，可以npm config ls，安装完成后也会显示位置。</span><br><span class="line"></span><br><span class="line">npm install X</span><br><span class="line">会把X包安装到node_modules目录中</span><br><span class="line">不会修改package.json</span><br><span class="line">之后运行npm install命令时，不会自动安装X</span><br><span class="line"></span><br><span class="line">npm install X --save  同  npm install X -S</span><br><span class="line">会把X包安装到node_modules目录中</span><br><span class="line">会在package.json的dependencies属性下添加X</span><br><span class="line">之后运行npm install命令时，会自动安装X到node_modules目录中</span><br><span class="line">之后运行npm install --production或者注明NODE_ENV变量值为production时，会自动安装msbuild到node_modules目录中,即是在线上环境运行时会将包安装</span><br><span class="line"></span><br><span class="line">npm install X –save-dev  同  npm install X -D</span><br><span class="line">会把X包安装到node_modules目录中</span><br><span class="line">会在package.json的devDependencies属性下添加X</span><br><span class="line">之后运行npm install命令时，会自动安装X到node_modules目录中</span><br><span class="line">之后运行npm install –production或者注明NODE_ENV变量值为production时，不会自动安装X到node_modules目录中</span><br><span class="line"></span><br><span class="line">使用原则:</span><br><span class="line">devDependencies 节点下的模块是我们在开发时需要用的，比如项目中使用的 gulp ，压缩css、js的模块。这些模块在我们的项目部署后是不需要的，所以我们可以使用--save-dev的形式安装。像 express 这些模块是项目运行必备的，应该安装在 dependencies 节点下，所以我们应该使用--save的形式安装。</span><br><span class="line"></span><br><span class="line">总结为一句话：运行时需要用到的包使用––save，否则使用––save-dev。</span><br><span class="line"></span><br><span class="line">作者：JuanitaLee</span><br><span class="line">链接：https://www.jianshu.com/p/920c1a6e999c</span><br><span class="line">来源：简书</span><br><span class="line">著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</span><br></pre></td></tr></table></figure>

<h1 id="3-初始化hexo"><a href="#3-初始化hexo" class="headerlink" title="3. 初始化hexo"></a>3. 初始化hexo</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo init &lt;folder&gt; # 创建网站目录，并从github上pull模板下来</span><br><span class="line">cd &lt;folder&gt;</span><br><span class="line">npm install # 根据模板的package，安装各种模块</span><br></pre></td></tr></table></figure>

<p>安装好后，会提示你<code>xx packages are looking for funding</code>。这里没有其他意思，真的是字面上的意思，有xx个包的开发者正在寻求资金支持，输入<code>npm fund</code>就可找到详细的链接了，如果有意愿和余力，当然是鼓励支持呀！</p>
<p>如果不想看到这段话。。。就运行<code>npm install --no-fund</code></p>
<h1 id="4-安装主题"><a href="#4-安装主题" class="headerlink" title="4. 安装主题"></a>4. 安装主题</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install -S hexo-theme-next@latest # 安装next主题</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">npm install -S hexo-theme-icarus <span class="comment"># 安装icarus主题</span></span></span><br></pre></td></tr></table></figure>

<p>创建<del><code>_config.icarus.yml</code>和</del><code>_config.next.yml</code>配置文件</p>
<p><code>_config.yml</code>是站点设置，<code>_config.xx.yml</code>是对应的主题设置。</p>
<h1 id="5-建立tags、categories、404页面"><a href="#5-建立tags、categories、404页面" class="headerlink" title="5. 建立tags、categories、404页面"></a>5. 建立tags、categories、404页面</h1><p>Next主题设置页面中明确提示了：</p>
<blockquote>
<p>Except <code>home</code> and <code>archives</code>, all custom pages under <code>menu</code> section need to be created manually. See <a href="https://theme-next.js.org/docs/theme-settings/custom-pages.html">«Custom Page Support»</a>.</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo new page 404</span><br><span class="line">hexo new page tags</span><br><span class="line">hexo new page categories</span><br><span class="line">hexo new page about</span><br></pre></td></tr></table></figure>
<h1 id="6-换gitignore"><a href="#6-换gitignore" class="headerlink" title="6.换gitignore"></a>6.换gitignore</h1><figure class="highlight txt"><table><tr><td class="code"><pre><span class="line"># Hexo init</span><br><span class="line">db.json</span><br><span class="line">node_modules/</span><br><span class="line">public/</span><br><span class="line">.deploy*/</span><br><span class="line"></span><br><span class="line"># General</span><br><span class="line">.DS_Store</span><br><span class="line">.AppleDouble</span><br><span class="line">.LSOverride</span><br><span class="line"></span><br><span class="line"># Thumbnails</span><br><span class="line">._*</span><br><span class="line"></span><br><span class="line"># Files that might appear in the root of a volume</span><br><span class="line">.DocumentRevisions-V100</span><br><span class="line">.fseventsd</span><br><span class="line">.Spotlight-V100</span><br><span class="line">.TemporaryItems</span><br><span class="line">.Trashes</span><br><span class="line">.VolumeIcon.icns</span><br><span class="line">.com.apple.timemachine.donotpresent</span><br><span class="line"></span><br><span class="line"># Directories potentially created on remote AFP share</span><br><span class="line">.AppleDB</span><br><span class="line">.AppleDesktop</span><br><span class="line">Network Trash Folder</span><br><span class="line">Temporary Items</span><br><span class="line">.apdisk</span><br><span class="line"></span><br><span class="line"># Windows thumbnail cache files</span><br><span class="line">Thumbs.db</span><br><span class="line">ehthumbs.db</span><br><span class="line">ehthumbs_vista.db</span><br><span class="line"></span><br><span class="line"># Dump file</span><br><span class="line">*.stackdump</span><br><span class="line"></span><br><span class="line"># Folder config file</span><br><span class="line">Desktop.ini</span><br><span class="line"></span><br><span class="line"># Recycle Bin used on file shares</span><br><span class="line">$RECYCLE.BIN/</span><br><span class="line"></span><br><span class="line"># Windows Installer files</span><br><span class="line">*.cab</span><br><span class="line">*.msi</span><br><span class="line">*.msm</span><br><span class="line">*.msp</span><br><span class="line"></span><br><span class="line"># Windows shortcuts</span><br><span class="line">*.lnk</span><br><span class="line"></span><br><span class="line">*~</span><br><span class="line"></span><br><span class="line"># temporary files which can be created if a process still has a handle open of a deleted file</span><br><span class="line">.fuse_hidden*</span><br><span class="line"></span><br><span class="line"># KDE directory preferences</span><br><span class="line">.directory</span><br><span class="line"></span><br><span class="line"># Linux trash folder which might appear on any partition or disk</span><br><span class="line">.Trash-*</span><br><span class="line"></span><br><span class="line"># .nfs files are created when an open file is removed but is still being accessed</span><br><span class="line">.nfs*</span><br><span class="line"></span><br><span class="line"># Logs</span><br><span class="line">logs</span><br><span class="line">*.log</span><br><span class="line">npm-debug.log*</span><br><span class="line">yarn-debug.log*</span><br><span class="line">yarn-error.log*</span><br><span class="line"></span><br><span class="line"># Runtime data</span><br><span class="line">pids</span><br><span class="line">*.pid</span><br><span class="line">*.seed</span><br><span class="line">*.pid.lock</span><br><span class="line"></span><br><span class="line"># Directory for instrumented libs generated by jscoverage/JSCover</span><br><span class="line">lib-cov</span><br><span class="line"></span><br><span class="line"># Coverage directory used by tools like istanbul</span><br><span class="line">coverage</span><br><span class="line"></span><br><span class="line"># nyc test coverage</span><br><span class="line">.nyc_output</span><br><span class="line"></span><br><span class="line"># Grunt intermediate storage (http://gruntjs.com/creating-plugins#storing-task-files)</span><br><span class="line">.grunt</span><br><span class="line"></span><br><span class="line"># Bower dependency directory (https://bower.io/)</span><br><span class="line">bower_components</span><br><span class="line"></span><br><span class="line"># node-waf configuration</span><br><span class="line">.lock-wscript</span><br><span class="line"></span><br><span class="line"># Compiled binary addons (https://nodejs.org/api/addons.html)</span><br><span class="line">build/Release</span><br><span class="line"></span><br><span class="line"># Dependency directories</span><br><span class="line">node_modules/</span><br><span class="line">jspm_packages/</span><br><span class="line"></span><br><span class="line"># Typescript v1 declaration files</span><br><span class="line">typings/</span><br><span class="line"></span><br><span class="line"># Optional npm cache directory</span><br><span class="line">.npm</span><br><span class="line"></span><br><span class="line"># Optional eslint cache</span><br><span class="line">.eslintcache</span><br><span class="line"></span><br><span class="line"># Optional REPL history</span><br><span class="line">.node_repl_history</span><br><span class="line"></span><br><span class="line"># Output of &#x27;npm pack&#x27;</span><br><span class="line">*.tgz</span><br><span class="line"></span><br><span class="line"># Yarn Integrity file</span><br><span class="line">.yarn-integrity</span><br><span class="line"></span><br><span class="line"># dotenv environment variables file</span><br><span class="line">.env</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">.vscode/*</span><br><span class="line">!.vscode/settings.json</span><br><span class="line">!.vscode/tasks.json</span><br><span class="line">!.vscode/launch.json</span><br><span class="line">!.vscode/extensions.json</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">*.gem</span><br><span class="line">*.rbc</span><br><span class="line">/.config</span><br><span class="line">/coverage/</span><br><span class="line">/InstalledFiles</span><br><span class="line">/pkg/</span><br><span class="line">/spec/reports/</span><br><span class="line">/spec/examples.txt</span><br><span class="line">/test/tmp/</span><br><span class="line">/test/version_tmp/</span><br><span class="line">/tmp/</span><br><span class="line"></span><br><span class="line"># Used by dotenv library to load environment variables.</span><br><span class="line"># .env</span><br><span class="line"></span><br><span class="line">## Specific to RubyMotion:</span><br><span class="line">.dat*</span><br><span class="line">.repl_history</span><br><span class="line">build/</span><br><span class="line">*.bridgesupport</span><br><span class="line">build-iPhoneOS/</span><br><span class="line">build-iPhoneSimulator/</span><br><span class="line"></span><br><span class="line">## Specific to RubyMotion (use of CocoaPods):</span><br><span class="line">#</span><br><span class="line"># We recommend against adding the Pods directory to your .gitignore. However</span><br><span class="line"># you should judge for yourself, the pros and cons are mentioned at:</span><br><span class="line"># https://guides.cocoapods.org/using/using-cocoapods.html#should-i-check-the-pods-directory-into-source-control</span><br><span class="line">#</span><br><span class="line"># vendor/Pods/</span><br><span class="line"></span><br><span class="line">## Documentation cache and generated files:</span><br><span class="line">/.yardoc/</span><br><span class="line">/_yardoc/</span><br><span class="line">/doc/</span><br><span class="line">/rdoc/</span><br><span class="line"></span><br><span class="line">## Environment normalization:</span><br><span class="line">/.bundle/</span><br><span class="line">/vendor/bundle</span><br><span class="line">/lib/bundler/man/</span><br><span class="line"></span><br><span class="line"># for a library or gem, you might want to ignore these files since the code is</span><br><span class="line"># intended to run in multiple environments; otherwise, check them in:</span><br><span class="line"># Gemfile.lock</span><br><span class="line"># .ruby-version</span><br><span class="line"># .ruby-gemset</span><br><span class="line"></span><br><span class="line"># unless supporting rvm &lt; 1.11.0 or doing something fancy, ignore this:</span><br><span class="line">.rvmrc</span><br><span class="line"></span><br><span class="line"># jekyll</span><br><span class="line">Gemfile.lock</span><br><span class="line">package-lock.json</span><br><span class="line">_site/</span><br><span class="line">.sass-cache/</span><br><span class="line">.jekyll-metadata</span><br><span class="line"></span><br><span class="line">_drafts/</span><br></pre></td></tr></table></figure>

<h1 id="7-更新hexo及主题的nodejs程序"><a href="#7-更新hexo及主题的nodejs程序" class="headerlink" title="7.更新hexo及主题的nodejs程序"></a>7.更新hexo及主题的nodejs程序</h1><p><del>在项目文件夹下运行<code>npm update -S</code>即可。</del></p>
<p>安装<code>npm install -g npm-check</code></p>
<p>然后运行<code>npm-check</code>检查哪些包需要更新</p>
<p>最后<code>npm-check -u</code>交互式升级包，升级后package.json也会同步更新。出了问题，就一个一个更新看看哪里有问题了。</p>
<p>其他可参考<a href="https://novnan.github.io/Hexo/update_hexo/">Hexo版本升级指南 | novnan’s notes</a></p>
<h1 id="8-部署"><a href="#8-部署" class="headerlink" title="8. 部署"></a>8. 部署</h1><p>这里介绍两种部署到github的方式，还可以选择部署到vercel</p>
<h2 id="8-1-hexo-deployer"><a href="#8-1-hexo-deployer" class="headerlink" title="8.1 hexo deployer"></a>8.1 hexo deployer</h2><p>先要安装插件’npm install hexo-deployer-git –save’，然后在<code>_config.yml</code>中设置deploy的相关内容，<a href="https://hexo.io/docs/one-command-deployment">具体参见</a>。</p>
<hr>
<p>2023.9.12更新</p>
<p>文档里举例的<code>repo</code>写法是https的，在此次更新中遇到的问题，github action编译后无法推送，提示<code>could not read Username for &#39;https://github.com&#39;: No such file or directory</code>。</p>
<p>我在本地使用hexo deploy时也是同样的问题，但多了一个提示，说使用用户名和密码的验证方式很早就禁止了。在为本地计算机配置git ssh，将repo地址改为ssh的写法后，一切顺利。</p>
<h2 id="8-2-hexo-action"><a href="#8-2-hexo-action" class="headerlink" title="8.2 hexo-action"></a>8.2 hexo-action</h2><p>参考<a href="https://github.com/sma11black/hexo-action">hexo-action</a>，利用github action来将网页发布到github pages.</p>
<p>注意，不要使用GitHub账户的那个<code>key</code>，单独设置一个，而且添加时候也会提醒。。。偷不到懒的。。。</p>
<p><strong>config里的deploy插件是必须的</strong>，另外注意<code>9.1</code>中提到的git地址的写法，也就是<a href="mailto:&#x67;&#x69;&#116;&#64;&#x67;&#105;&#x74;&#x68;&#117;&#98;&#x2e;&#99;&#x6f;&#x6d;">&#x67;&#x69;&#116;&#64;&#x67;&#105;&#x74;&#x68;&#117;&#98;&#x2e;&#99;&#x6f;&#x6d;</a>:xxx</p>
<hr>
<p>2023.9.12测试补充<br>npm更新到10.0以上时，sma11black的脚本使用的node版本太旧了，在marketplace里找到一个更新:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">- name: Hexo Action with Nodejs 17</span><br><span class="line">  uses: mark0smith/hexo-action@v0.0.3</span><br></pre></td></tr></table></figure>

<p>用以上信息替换smallblack脚本中的<code>uses</code>内容即可。</p>
<h2 id="8-3-vercel"><a href="#8-3-vercel" class="headerlink" title="8.3 vercel"></a>8.3 vercel</h2><p>直接在vercel的网站上配置即可。</p>
<p>项目settings里有选择node.js版本的选项，最近的更新在这里卡了好久，本地更新自己的nodejs没用的。。。</p>
<h1 id="9-阅读时长-≈-NaN-aN"><a href="#9-阅读时长-≈-NaN-aN" class="headerlink" title="9. 阅读时长 ≈ NaN:aN"></a>9. 阅读时长 ≈ NaN:aN</h1><p>按照教程开启阅读时长及字数统计后，如果不显示正确信息，那么记得清除数据：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br></pre></td></tr></table></figure>

<h1 id="10-开启hexo-word-counter中的post图标选项"><a href="#10-开启hexo-word-counter中的post图标选项" class="headerlink" title="10. 开启hexo-word-counter中的post图标选项"></a>10. 开启hexo-word-counter中的post图标选项</h1><p><code>hexo-word-counter</code>插件说明中提到<code>item_text_post</code>选项，实际测试设置无效，且next-theme的配置说明里也没有这个选项。</p>
<p>找到了next-theme的<a href="https://t.me/theme_next_cn">telegram群</a>，群内大佬指点，应该修改：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">post_meta:</span><br><span class="line">  item_text: false</span><br></pre></td></tr></table></figure>

<h1 id="11-hexo-文章创建时间与更新时间"><a href="#11-hexo-文章创建时间与更新时间" class="headerlink" title="11.hexo 文章创建时间与更新时间"></a>11.hexo 文章创建时间与更新时间</h1><p>在<code>_config.yml</code>下设置<code>updated_option: &#39;date&#39;</code></p>
<p>在<code>_config.next.yml</code>下设置：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">post_meta:</span><br><span class="line">  updated_at:</span><br><span class="line">    enable: true</span><br><span class="line">    another_day: true</span><br></pre></td></tr></table></figure>

<p>然后在文章头中设置<code>updated</code>项，以此防止文件修改时间干扰最终显示。</p>
<h1 id="12-powershell下使用hexo命令提示”此系统上禁止运行脚本”"><a href="#12-powershell下使用hexo命令提示”此系统上禁止运行脚本”" class="headerlink" title="12.powershell下使用hexo命令提示”此系统上禁止运行脚本”"></a>12.powershell下使用hexo命令提示”此系统上禁止运行脚本”</h1><p><code>Set-ExecutionPolicy RemoteSigned</code> #此命令当时从哪里找的，忘了。。。</p>
<p><code>Set-ExecutionPolicy -ExecutionPolicy UNRESTRICTED</code> #刚才搜了一下，现在网上都是这个了。。。还没有测试过。。。 </p>
<h1 id="13-停止目录自动编号"><a href="#13-停止目录自动编号" class="headerlink" title="13.停止目录自动编号"></a>13.停止目录自动编号</h1><p>在’_config.next.yml’中修改<code>toc</code>下的<code>number</code>为<code>false</code></p>
<h1 id="Changelog"><a href="#Changelog" class="headerlink" title="Changelog"></a>Changelog</h1><p>2023&#x2F;09&#x2F;12 增加了软件更新的方式，完善了部署部分。</p>
<p>2022&#x2F;11&#x2F;21 增加停止目录自动编号的方法</p>
<p>2022&#x2F;11&#x2F;11 安装hexo还是要带着<code>-g</code>的，不能带’-S’，否则hexo命令行不起作用</p>
<p>2022&#x2F;11&#x2F;09 此系统上禁止运行脚本</p>
]]></content>
      <categories>
        <category>Tutorial</category>
      </categories>
  </entry>
  <entry>
    <title>个人Git&amp;Github基本操作</title>
    <url>/personal-git-hub-basic-commands/</url>
    <content><![CDATA[<p>毕竟不是程序员，git这种东西，心血来潮才会用，用来用去都是些非常基础的操作，搜索啥的太麻烦，索性在自己记录下，以后复制粘贴喽。</p>
<p>如果你看到了这里，那么希望以下内容也能对你有用哈。</p>
<span id="more"></span>

<h1 id="默认pub-key名称"><a href="#默认pub-key名称" class="headerlink" title="默认pub-key名称"></a>默认pub-key名称</h1><p>By default, the filenames of the public keys are one of the following:</p>
<ul>
<li><em>id_rsa.pub</em></li>
<li><em>id_ecdsa.pub</em></li>
<li><em>id_ed25519.pub</em></li>
</ul>
<h1 id="生成SSH-Key"><a href="#生成SSH-Key" class="headerlink" title="生成SSH-Key"></a>生成SSH-Key</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t ed25519 -C &quot;your_email@example.com&quot;</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -b 4096 -C &quot;your_email@example.com&quot;</span><br></pre></td></tr></table></figure>

<h1 id="测试SSH"><a href="#测试SSH" class="headerlink" title="测试SSH"></a>测试SSH</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure>

<h2 id="Permissions-for-“xxx”-are-too-open"><a href="#Permissions-for-“xxx”-are-too-open" class="headerlink" title="Permissions for “xxx” are too open"></a>Permissions for “xxx” are too open</h2><p>解决方法：</p>
<p>xxx文件-&gt;属性-&gt;安全-&gt;高级-&gt;所有者改成当前操作用户-&gt;权限条目删除所有并添加当前操作用户，另，禁用继承？</p>
<h1 id="添加到远程仓库"><a href="#添加到远程仓库" class="headerlink" title="添加到远程仓库"></a>添加到远程仓库</h1><h2 id="1、创建本地仓库（必须与github上面创建的仓库名称一样）（git-init-命令）"><a href="#1、创建本地仓库（必须与github上面创建的仓库名称一样）（git-init-命令）" class="headerlink" title="1、创建本地仓库（必须与github上面创建的仓库名称一样）（git init 命令）"></a>1、创建本地仓库（必须与github上面创建的仓库名称一样）（git init 命令）</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git init 仓库名称（必须与github创建的仓库名称一样）</span><br></pre></td></tr></table></figure>

<h2 id="2、切换到创建的本地仓库（cd-命令）"><a href="#2、切换到创建的本地仓库（cd-命令）" class="headerlink" title="2、切换到创建的本地仓库（cd 命令）"></a>2、切换到创建的本地仓库（cd 命令）</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd 仓库名称</span><br></pre></td></tr></table></figure>

<h2 id="3、添加监控（可以监控该仓库下所有文件夹、具体文件夹、具体文件）（git-add-命令）"><a href="#3、添加监控（可以监控该仓库下所有文件夹、具体文件夹、具体文件）（git-add-命令）" class="headerlink" title="3、添加监控（可以监控该仓库下所有文件夹、具体文件夹、具体文件）（git add 命令）"></a>3、添加监控（可以监控该仓库下所有文件夹、具体文件夹、具体文件）（git add 命令）</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git add .</span><br><span class="line"></span><br><span class="line">或是</span><br><span class="line"></span><br><span class="line">git add 文件夹名称</span><br><span class="line"></span><br><span class="line">或是</span><br><span class="line"></span><br><span class="line">git add 具体文件名称</span><br></pre></td></tr></table></figure>

<h2 id="4、将缓存提交到本地仓库并且备注信息（git-commit-m-命令）"><a href="#4、将缓存提交到本地仓库并且备注信息（git-commit-m-命令）" class="headerlink" title="4、将缓存提交到本地仓库并且备注信息（git commit -m 命令）"></a>4、将缓存提交到本地仓库并且备注信息（git commit -m 命令）</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git commit -m &quot;备注信息&quot;</span><br></pre></td></tr></table></figure>

<h2 id="5、-添加远程仓库（git-remote-add-origin-命令）"><a href="#5、-添加远程仓库（git-remote-add-origin-命令）" class="headerlink" title="5、 添加远程仓库（git remote add origin 命令）"></a>5、 添加远程仓库（git remote add origin 命令）</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git remote add origin 仓库克隆SSh地址</span><br></pre></td></tr></table></figure>

<h2 id="6、将分支推送到GitHub（git-push-命令）"><a href="#6、将分支推送到GitHub（git-push-命令）" class="headerlink" title="6、将分支推送到GitHub（git push 命令）"></a>6、将分支推送到GitHub（git push 命令）</h2><p>首次推送</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git push -u origin master # -u用来设定默认推送，反向操作为 git branch --unset-upstream</span><br></pre></td></tr></table></figure>

<p>非首次推送</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git push</span><br></pre></td></tr></table></figure>

<h1 id="VS-code每次打开github仓库时总是弹出页面要求登录"><a href="#VS-code每次打开github仓库时总是弹出页面要求登录" class="headerlink" title="VS code每次打开github仓库时总是弹出页面要求登录"></a>VS code每次打开github仓库时总是弹出页面要求登录</h1><p>网上的那些教程让你<code>git config --global credential.helper store</code>不解决根本问题，有个<a href="https://stackoverflow.com/a/34627954/22544109">回答</a>写得很好，但不解决根本问题。</p>
<blockquote>
<p>You can do a temporary trick to cache the authorization</p>
</blockquote>
<p>原因我也找到了：在vscode里开启了<code>auto-fetch</code>，同时这个仓库还使用https的链接</p>
<p>解决方法：设置github的ssh认证方式，然后把仓库链接改为<a href="mailto:&#103;&#105;&#x74;&#x40;&#x67;&#x69;&#x74;&#x68;&#x75;&#x62;&#46;&#x63;&#x6f;&#109;">&#103;&#105;&#x74;&#x40;&#x67;&#x69;&#x74;&#x68;&#x75;&#x62;&#46;&#x63;&#x6f;&#109;</a>这种形式的。一劳永逸啊。</p>
<p>ref：</p>
<p><a href="https://blog.csdn.net/qq_36761831/article/details/88725670">https://blog.csdn.net/qq_36761831/article/details/88725670</a></p>
<p><a href="https://blog.csdn.net/xiaohaolaoda/article/details/105434315">https://blog.csdn.net/xiaohaolaoda/article/details/105434315</a></p>
<p><a href="https://stackoverflow.com/a/52298381/22544109">https://stackoverflow.com/a/52298381/22544109</a></p>
]]></content>
      <categories>
        <category>Tutorial</category>
      </categories>
      <tags>
        <tag>error</tag>
        <tag>win10</tag>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>win10下qbittorrent、flexget和ART全自动盒子配置</title>
    <url>/win10-qbittorrent-flexget-autoremove-torrents/</url>
    <content><![CDATA[<p>之前写过一篇《<a href="/qbittorrent-flexget-autoremove-torrents/">qbittorrent、flexget和AMT配合使用，全自动的盒子配置</a>》介绍了qb，flexget和art的搭配使用，不用linux盒子已经很久了，反倒家里的windows上一直在跑着刷中。恰好老家的机器硬盘挂了，换了硬盘，重装了系统，就借此契机分享下在windows10 LTSC中如何搭建全自动盒子吧。</p>
<span id="more"></span>

<p>如我预见，干这类重装的事，总是会遇见鬼的，这次刚开始，鬼就出现了。</p>
<h1 id="安装qb、python、flexget以及autoremove-torrents"><a href="#安装qb、python、flexget以及autoremove-torrents" class="headerlink" title="安装qb、python、flexget以及autoremove-torrents"></a>安装qb、python、flexget以及autoremove-torrents</h1><p>qb和python当然是官网下安装包咯。然后pip安装flexget和art。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip install flexget autoremove-torrents</span><br></pre></td></tr></table></figure>
<h2 id="遇鬼"><a href="#遇鬼" class="headerlink" title="遇鬼"></a>遇鬼</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">flexget check</span><br><span class="line"></span><br><span class="line">Plugin `flexget.plugins.daemon.web_server` failed to import dependencies Traceback (most recent call last):</span><br><span class="line">。。。</span><br><span class="line">。。。</span><br><span class="line">ImportError: DLL load failed while importing _brotli: 找不到指定的模块。</span><br></pre></td></tr></table></figure>

<p>然后加开始了一上午的搜索，与plugin error相关的线索实在是太少了，没啥卵用。突发奇想，是不是python版本太高，兼容有问题？从3.9.5降到3.8.10也不行。换之前常用的电脑测试，flexget是可以正常运行的。陷入僵局。</p>
<p>下午再次运行测试，终于看到了那句“DLL load failed while importing”，难道是DLL缺失？我用的官网镜像哎。。。</p>
<p>搜了一圈，发现各路大神复制DLL解决问题的神操作，准备顶着头皮冲一下，这是，看到一个小伙儿说安装运行库啥的没用。没用？没用？？哼哼，旧电脑和新装的系统，能有啥区别？去程序里看看呗？果然各种运行库都在。那就下一个呗。</p>
<p>建议各位搜索<strong>最新支持的 Visual C++ 下载</strong>，20mb，一切搞定！！找到出路的感觉真爽。</p>
<h2 id="flexget和autoremove-torrents配置"><a href="#flexget和autoremove-torrents配置" class="headerlink" title="flexget和autoremove-torrents配置"></a>flexget和autoremove-torrents配置</h2><p>参阅之前的文章哈《<a href="/qbittorrent-flexget-autoremove-torrents/">qbittorrent、flexget和AMT配合使用，全自动的盒子配置</a>》</p>
<h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><h2 id="测试flexget运行"><a href="#测试flexget运行" class="headerlink" title="测试flexget运行"></a>测试flexget运行</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">flexget --test --loglevel debug execute</span><br></pre></td></tr></table></figure>

<p>看看是不是符合你的预期？</p>
<h2 id="测试AMT运行"><a href="#测试AMT运行" class="headerlink" title="测试AMT运行"></a>测试AMT运行</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">autoremove-torrents --view</span><br></pre></td></tr></table></figure>

<p>看看是不是符合你的预期？</p>
<h1 id="设置自动运行"><a href="#设置自动运行" class="headerlink" title="设置自动运行"></a>设置自动运行</h1><p>使用win10自带的计划任务即可，</p>
<p>需要<strong>特别提示</strong>的，pip安装的程序的路径在：</p>
<p><code>C:\Users\YourUserName\AppData\Local\Programs\Python\PythonXX\Scripts</code>下</p>
<h2 id="以上"><a href="#以上" class="headerlink" title="以上"></a>以上</h2>]]></content>
      <categories>
        <category>Tutorial</category>
      </categories>
      <tags>
        <tag>win10</tag>
        <tag>qbittorrent</tag>
        <tag>flexget</tag>
        <tag>autoremove-torrents</tag>
      </tags>
  </entry>
  <entry>
    <title>msmtp+smartmontools搭建Ubuntu下硬盘状态自动监控发送邮件</title>
    <url>/msmtp-smartmontools-auto-monitoring-mail/</url>
    <content><![CDATA[<p>近期又开始折腾了。入手了一个京云小盒子，准备放回老家刷PT。盒子只有2G内存，装完win10 LTSC只剩下400M内存，太危险，没办法，还是用linux吧。我的NAS最基本的就是plex+qb，但毕竟远程操作，及时知道硬盘状态很重要，家里用的stablebit scanner只能在windows下使用，就开始琢磨linux下的方案啦。一如既往，踩够了坑，在整理记录下，希望能对看到的你有所帮助。</p>
<span id="more"></span>


<h1 id="1-msmtp"><a href="#1-msmtp" class="headerlink" title="1.msmtp"></a>1.msmtp</h1><h2 id="1-1安装msmtp"><a href="#1-1安装msmtp" class="headerlink" title="1.1安装msmtp"></a>1.1安装msmtp</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt install bsd-mailx msmtp msmtp-mta</span><br></pre></td></tr></table></figure>

<p><code>bsd-mailx</code>这个是本次踩的最大的坑，最小化安装的ubuntu没有自带邮件系统，是没有所有的邮件系统，既没有mail这个命令，也没又系统内置的邮箱，即是说，smartclt即使发送给用户也是收不到的，更不用说向外部发送邮件了。自然<code>msmtp-mta</code>创建的<code>sendmail</code>软链接也就成了无根之水。</p>
<h2 id="1-2配置msmtp"><a href="#1-2配置msmtp" class="headerlink" title="1.2配置msmtp"></a>1.2配置msmtp</h2><p>全局配置文件在<code>/etc/msmtprc</code>下，具体配置如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Set default values for all following accounts.</span><br><span class="line">defaults</span><br><span class="line">auth           on</span><br><span class="line">tls            on</span><br><span class="line">tls_trust_file /etc/ssl/certs/ca-certificates.crt</span><br><span class="line">logfile        /home/xxx/.msmtp.log</span><br><span class="line">#tls_starttls   off</span><br><span class="line">#tls_certcheck  off</span><br><span class="line"></span><br><span class="line"># Yandex</span><br><span class="line">account        yandex</span><br><span class="line">host           smtp.yandex.com</span><br><span class="line">port           465</span><br><span class="line">from           xxx@yandex.com</span><br><span class="line">user           xxx</span><br><span class="line">password       xxx</span><br><span class="line"></span><br><span class="line"># Hotmail</span><br><span class="line">account        hotmail</span><br><span class="line">host           smtp-mail.outlook.com</span><br><span class="line">port           587</span><br><span class="line">from           xxx@hotmail.com</span><br><span class="line">user           xxx@hotmail.com</span><br><span class="line">password       xxxx</span><br><span class="line"></span><br><span class="line"># Set a default account</span><br><span class="line">account default : hotmail</span><br></pre></td></tr></table></figure>

<p>这里踩的坑是外发邮箱的选择，一开始选了yandex，但这个邮箱的smtp不支持starttls，可以通过<code>tls_starttls   off</code>并设置端口为465解决予以解决，提示证书错可以通过<code>tls_certcheck  off</code>，更恶心的来了，yandex还会监控你的邮件内容，太过简单的内容会被认为是垃圾邮件而拒绝投递。无奈换了hotmail，豁然开朗！所有问题都不是问题了，所以，有时候，选择啊，比努力更重要XD。</p>
<h2 id="1-3解决crontab任务持续报错的问题"><a href="#1-3解决crontab任务持续报错的问题" class="headerlink" title="1.3解决crontab任务持续报错的问题"></a>1.3解决crontab任务持续报错的问题</h2><p>这里设置的msmtp是为了让smartmontools发送错误信息，但crontab任务默认会将执行的结果发送给当用户（见<code>crontab -e</code>时最上边的那一串提示，<code>Output of the crontab jobs (including errors) is sent through email to the user the crontab file belongs to (unless redirected).</code>），因为没有本地邮件账户，会蹦出来好多错误日志，写入<code>/home/xxx/.msmtp.log</code>，不够美型。。</p>
<p>解决方法:</p>
<p>执行crontab任务时加上输出后缀即可：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0 2 * * * /home/backup.sh &gt;/dev/null 2&gt;&amp;1</span><br></pre></td></tr></table></figure>

<ul>
<li><p>The <strong>&gt;&#x2F;dev&#x2F;null</strong> tells the cron to send all output (STDOUT) to &#x2F;dev&#x2F;null</p>
</li>
<li><p>The <strong>2&gt;$1</strong> tells the cron to send all errors (STDERR) to same as (STDOUT)</p>
</li>
</ul>
<p>世界清净了！</p>
<h2 id="1-4有的crontab想发送至本地账户怎么办？"><a href="#1-4有的crontab想发送至本地账户怎么办？" class="headerlink" title="1.4有的crontab想发送至本地账户怎么办？"></a>1.4有的crontab想发送至本地账户怎么办？</h2><p>摸索中。。。</p>
<h1 id="2-smartmontools"><a href="#2-smartmontools" class="headerlink" title="2.smartmontools"></a>2.smartmontools</h1><h2 id="2-1安装smartmontools"><a href="#2-1安装smartmontools" class="headerlink" title="2.1安装smartmontools"></a>2.1安装smartmontools</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt install smartmontools</span><br></pre></td></tr></table></figure>

<p>配置文件在<code>/etc/smartd.conf</code>，配置重点有两个，</p>
<ol>
<li><p>#掉<code>DEVICESCAN</code>开头的命令，否则其下的命令都不会执行</p>
</li>
<li><p>最上边加入一行<code>/dev/sda -H -m xxx@hotmail.com</code></p>
</li>
</ol>
<p>想测试可以在命令后加<code>-M test</code>,然后<code>sudo systemctl restart smartd</code>重启服务，看看会不会收到邮件。</p>
<p>如前文提到的，这一步卡了很久，msmtp发送，smartd的配置看起来也很正常，就是发布出去邮件。搜索了很久，受一篇文章启发，利用<code>grep &quot;smartd&quot; /var/log/syslog*</code>查询日志，发现提示大意是没有mail命令啥的，意识到可能是有些前置问题没解决。。。</p>
<p>再然后，发现安装bsd-mail即可解决，每个用户也有了自己的系统邮箱，输入mail即可查阅，这也是为什么smartd配置文档里<code>-m</code>后跟的不是邮件地址而是用户名的原因。</p>
<p>另外，配置文件里的建议设置里写的是<code>/dev/sda -H -m root -c 0 -u 0</code>，-c和-u设置为零意思是不检测<code>pending sectors</code>和<code>uncorrectable sectors</code>。。。不知道文档作者是有什么特别的想法。。。至少我看到这俩提示了，还不赶快换硬盘，作死么？</p>
<h1 id="3-参考链接"><a href="#3-参考链接" class="headerlink" title="3.参考链接"></a>3.参考链接</h1><p>1.<a href="https://www.smartmontools.org/browser/trunk/smartmontools/smartd.conf.5.in?order=name">smartd.conf.5.in</a></p>
<p>2.<a href="https://wiki.archlinux.org/title/Msmtp">msmtp - ArchWiki (archlinux.org)</a></p>
<p>3.<a href="https://blog.csdn.net/oMrApollo/article/details/72478000">( msmtp+mutt发送TLS邮件异常处理_Maxi的专栏-CSDN博客</a></p>
<p>4.<a href="https://linuxconfig.org/how-to-configure-smartd-and-be-notified-of-hard-disk-problems-via-email">How to configure smartd and be notified of hard disk problems via email - Linux Tutorials - Learn Linux Configuration</a></p>
<p>5.<a href="https://askubuntu.com/questions/623325/how-to-check-all-s-m-a-r-t-logs-location">14.04 - How to check all S.M.A.R.T. logs location - Ask Ubuntu</a></p>
<p>6.<a href="https://unix.stackexchange.com/questions/640296/configuring-mail-command-to-use-msmtp">Configuring mail command to use msmtp - Unix &amp; Linux Stack Exchange</a>–提及bsd-mailx</p>
<p>7.<a href="https://linux.cn/article-4461-1.html">系统运维|使用 smartmontools 查看硬盘的健康状态 (linux.cn)</a></p>
<p>8.<a href="https://tecadmin.net/disable-crontab-output-email-notifications/">How To Disable Crontab Output and Email Notifications - TecAdmin</a></p>
<p>9.<a href="https://www.cnblogs.com/tinywan/p/6025468.html">Shell脚本———— &#x2F;dev&#x2F;null 2&gt;&amp;1详解 - Tinywan - 博客园 (cnblogs.com)</a></p>
<p>10.<a href="https://websistent.com/msmtp-cron/">How to Configure MSMTP for Cron - Jesin’s Blog (websistent.com)</a></p>
]]></content>
      <categories>
        <category>Tutorial</category>
      </categories>
      <tags>
        <tag>harddriver</tag>
        <tag>ubuntu</tag>
        <tag>msmtps</tag>
        <tag>smartmontools</tag>
      </tags>
  </entry>
  <entry>
    <title>windows10下利用docker安装nextcloud及相关踩坑</title>
    <url>/nextcloud-docker-windows/</url>
    <content><![CDATA[<p>终于在家里的windows NAS里用docker装好了nextcloud，写出来纪念下吧！</p>
<span id="more"></span>

<h1 id="一、安装docker-desktop"><a href="#一、安装docker-desktop" class="headerlink" title="一、安装docker desktop"></a>一、安装docker desktop</h1><p>在window程序和功能，开启wsl支持，下载官网客户端安装。</p>
<h2 id="（一）更新国内源"><a href="#（一）更新国内源" class="headerlink" title="（一）更新国内源"></a>（一）更新国内源</h2><p>不得不说，阿里还是！快！</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot; : [</span><br><span class="line">    &quot;https://xxx.mirror.aliyuncs.com&quot;,</span><br><span class="line">    &quot;https://registry.docker-cn.com&quot;,</span><br><span class="line">    &quot;http://hub-mirror.c.163.com&quot;</span><br><span class="line">  ],</span><br><span class="line">  &quot;insecure-registries&quot; : [</span><br><span class="line">    &quot;registry.docker-cn.com&quot;,</span><br><span class="line">  ],</span><br><span class="line">  &quot;debug&quot; : true,</span><br><span class="line">  &quot;experimental&quot; : true</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="（二）开启wsl集成！！在WSL2中启动docker"><a href="#（二）开启wsl集成！！在WSL2中启动docker" class="headerlink" title="（二）开启wsl集成！！在WSL2中启动docker"></a>（二）开启wsl集成！！在WSL2中启动docker</h2><p>这一步应该是在windows10上正确使用docker最重要的一步了。运行在wsl2下的docker desktop实际上是在使用hyper-v虚拟机，如果直接用GUI配合windows下的compose进行操作，那么在挂载windows目录时，如果这个目录用于多个image交互，可能导致权限及通信等各类错误。</p>
<p>在单独安装的wsl的系统下，比如ubuntu中执行docker命令，实质上还是调用docker desktop，但是相当于在一个linux环境下调用，避免了许多报错，也可以方便的更改权限设置。</p>
<p>具体步骤：</p>
<ol>
<li><p>之前安装docker的时候应该已经启用过WSL了。</p>
</li>
<li><p>安装windows10下的ubunu。</p>
</li>
<li><p>在docker desktop中<code>setting-resources-WSLIntegration</code>中启用ubuntu</p>
</li>
<li><p>在ubuntu中使用docker</p>
</li>
</ol>
<p>此时可使用<code>/mnt/c</code>的挂载方式。</p>
<h2 id="（三）docker-compose-yml设置"><a href="#（三）docker-compose-yml设置" class="headerlink" title="（三）docker-compose.yml设置"></a>（三）docker-compose.yml设置</h2><p>使用官方github中的example即可，家用内网强烈建议使用insecure-postgres-fpm，性能最佳。朋友们。。。至少换掉apache啊。。1202年了。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">version: &#x27;3&#x27;</span><br><span class="line"></span><br><span class="line">services:</span><br><span class="line">  db:</span><br><span class="line">    image: postgres:alpine</span><br><span class="line">    restart: always</span><br><span class="line">    volumes:</span><br><span class="line">      - db:/var/lib/postgresql/data</span><br><span class="line">    env_file:</span><br><span class="line">      - db.env</span><br><span class="line"></span><br><span class="line">  redis:</span><br><span class="line">    image: redis:alpine</span><br><span class="line">    restart: always</span><br><span class="line"></span><br><span class="line">  app:</span><br><span class="line">    image: nextcloud:fpm-alpine</span><br><span class="line">    restart: always</span><br><span class="line">    volumes:</span><br><span class="line">      - nextcloud:/var/www/html</span><br><span class="line">    environment:</span><br><span class="line">      - POSTGRES_HOST=db</span><br><span class="line">      - REDIS_HOST=redis</span><br><span class="line">    env_file:</span><br><span class="line">      - db.env</span><br><span class="line">    depends_on:</span><br><span class="line">      - db</span><br><span class="line">      - redis</span><br><span class="line"></span><br><span class="line">  web:</span><br><span class="line">    build: ./web</span><br><span class="line">    restart: always</span><br><span class="line">    ports:</span><br><span class="line">      - 127.0.0.1:8080:80 #只能本地使用，外网需改为80:80</span><br><span class="line">    volumes:</span><br><span class="line">      - nextcloud:/var/www/html:ro</span><br><span class="line">    depends_on:</span><br><span class="line">      - app</span><br><span class="line"></span><br><span class="line">  cron:</span><br><span class="line">    image: nextcloud:fpm-alpine</span><br><span class="line">    restart: always</span><br><span class="line">    volumes:</span><br><span class="line">      - nextcloud:/var/www/html</span><br><span class="line">    entrypoint: /cron.sh</span><br><span class="line">    depends_on:</span><br><span class="line">      - db</span><br><span class="line">      - redis</span><br><span class="line"></span><br><span class="line">volumes:</span><br><span class="line">  db:</span><br><span class="line">  nextcloud:</span><br></pre></td></tr></table></figure>

<p>初次启动后，可以将数据文件复制到其他盘符，再挂载回去，这样数据库使用系统的固态硬盘，数据则可以使用大容量的机械硬盘。app-volume下增加：</p>
<p><code>/mnt/d/nextclouddata:/var/www/html/data</code></p>
<p><em><strong>启动nextcloud时需等待3-10mins，期间会有502错误</strong></em></p>
<h1 id="二、各种踩坑"><a href="#二、各种踩坑" class="headerlink" title="二、各种踩坑"></a>二、各种踩坑</h1><h2 id="（一）申请免费的ssl证书及内网的使用"><a href="#（一）申请免费的ssl证书及内网的使用" class="headerlink" title="（一）申请免费的ssl证书及内网的使用"></a>（一）申请免费的ssl证书及内网的使用</h2><p>内网使用let’s encrypt没有研究怎么实现，有路由器介入的情况下，即使有公网ip也会比较麻烦吧。所以就用一年期的免费ssl证书咯。时至今日，貌似只有阿里腾讯还提供比较便捷的免费服务。如果你有其他好的选择请告知。</p>
<p>使用时可以用官方带有nginx-proxy的样例，但设置比较繁琐，同时一般的国内ISP都会屏蔽公网ip的80和443，折腾了很久，最终还是放弃。。。</p>
<p>有几点在这里记录下：</p>
<h3 id="（1）取消HSTS-严格模式"><a href="#（1）取消HSTS-严格模式" class="headerlink" title="（1）取消HSTS(严格模式)"></a>（1）取消HSTS(严格模式)</h3><p>在<code>docker-compose.yml</code>的proxy容器下增加</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">environment:  </span><br><span class="line">  - HSTS=off</span><br></pre></td></tr></table></figure>

<p>本来是为了解决android客户端提示<code>严格模式-禁止http连接</code>的，但并没有解决，不过关掉hsts也挺好，这功能是安全，也很麻烦，想让HSTS失效的唯二办法，等待和清楚浏览器缓存。。。</p>
<p>不要直接该proxy的配置文件。。。么有用。。</p>
<h3 id="（2）证书的使用"><a href="#（2）证书的使用" class="headerlink" title="（2）证书的使用"></a>（2）证书的使用</h3><p>nginx-proxy使用的crt格式的证书，用aliyun生成的apahce证书中的pulic和chain合并，public在前，换行粘贴chain。</p>
<h2 id="（二）windows下挂在本地路径的写法"><a href="#（二）windows下挂在本地路径的写法" class="headerlink" title="（二）windows下挂在本地路径的写法"></a>（二）windows下挂在本地路径的写法</h2><p>2021.11在windows10 21H1，docker desktop v4.1.1下，经过多轮测试，对于windows下的volumes写法主要有两种：</p>
<p>1.<code>/c/Users/user/xxx:/var/nginx/html</code></p>
<p>2.<code>C:\Users\user\xxx:/var/nginx/html</code></p>
<p>3.<code>//var/run/docker.sock:/tmp/docker.sock:ro</code>在windows下使用反代时的<code>.sock</code>文件写法，否则proxy跑不起来一直重启，当然，这一条在最终的compose中完美避开了。<strong>在ubuntu中执行docker compose可以不用修改，直接用样例的格式即可</strong></p>
<p>另外，测试了可以<strong>不</strong>在环境变量或<code>.env</code>、<code>docker-compose.yml</code>文件中增加<code>COMPOSE_CONVERT_WINDOWS_PATHS=1</code>，可能是新版本自己进化了。。</p>
<p>还有，指向文件夹前，先创建那个文件夹。</p>
<h2 id="（三）windows下打开volume"><a href="#（三）windows下打开volume" class="headerlink" title="（三）windows下打开volume"></a>（三）windows下打开volume</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">\\wsl$\docker-desktop-data\version-pack-data\community\docker\volumes\</span><br></pre></td></tr></table></figure>

<h2 id="（四）解决数据目录权限0770提示及http连接问题"><a href="#（四）解决数据目录权限0770提示及http连接问题" class="headerlink" title="（四）解决数据目录权限0770提示及http连接问题"></a>（四）解决数据目录权限0770提示及http连接问题</h2><p>外置数据后编辑config.yml解决 ：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;check_data_directory_permissions&#x27; =&gt; false,</span><br><span class="line">&#x27;overwriteprotocol&#x27; =&gt; &#x27;http&#x27;,</span><br></pre></td></tr></table></figure>

<h2 id="（五）Too-many-redirect登录失败，提示多次失败"><a href="#（五）Too-many-redirect登录失败，提示多次失败" class="headerlink" title="（五）Too many redirect登录失败，提示多次失败"></a>（五）Too many redirect登录失败，提示多次失败</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">进入postgres容器</span><br><span class="line">psql -U nextcloud</span><br><span class="line">输入db.env中的nextcloud密码</span><br><span class="line">show tables;</span><br><span class="line">查看有哪些tables</span><br><span class="line">select * form oc_bruteforce_attempts;</span><br><span class="line">查看什么IP地址被Ban了</span><br><span class="line">DELETE FROM oc_bruteforce_attempts WHERE ip = &#x27;xxx.xx.x.x&#x27;;</span><br></pre></td></tr></table></figure>

<h2 id="（六）本地连接登录及增加其他域名"><a href="#（六）本地连接登录及增加其他域名" class="headerlink" title="（六）本地连接登录及增加其他域名"></a>（六）本地连接登录及增加其他域名</h2><p>在config.php中找到</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;trusted_domains&#x27; =&gt;</span><br><span class="line">	array (</span><br><span class="line">		0 =&gt; &#x27;localhost&#x27;,</span><br><span class="line">		1 =&gt; &#x27;server1.example.com&#x27;,</span><br><span class="line">		2 =&gt; &#x27;192.168.1.50&#x27;,</span><br><span class="line">		3 =&gt; &#x27;[fe80::1:50]&#x27;,</span><br><span class="line">),</span><br></pre></td></tr></table></figure>

<p>增加本地ip即可。</p>
<h2 id="（七）限制preview生成图片的大小"><a href="#（七）限制preview生成图片的大小" class="headerlink" title="（七）限制preview生成图片的大小"></a>（七）限制preview生成图片的大小</h2><p>nextcloud默认的preview很庞大，不要浪费空间，改一下吧。在config.php中加入：</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;preview_max_x&#x27; =&gt; 1080,</span><br><span class="line">&#x27;preview_max_y&#x27; =&gt; 1920,</span><br></pre></td></tr></table></figure>

<h2 id="（八）docker-container中运行occ命令"><a href="#（八）docker-container中运行occ命令" class="headerlink" title="（八）docker container中运行occ命令"></a>（八）docker container中运行occ命令</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker exec --user www-data &lt;nextcloud-container-name&gt; php occ &lt;your-command&gt;</span><br><span class="line">docker exec --user www-data nextcloud-app-1 php occ files:scan --all</span><br><span class="line">files:scan --all #添加本地文件</span><br><span class="line">files:cleanup</span><br><span class="line">files:scan-app-data #删除preview文件后执行</span><br><span class="line">config:app:set preview jpeg_quality --value=&quot;60&quot; #设置jpeg质量</span><br></pre></td></tr></table></figure>

<h2 id="（九）备份nextcloud时的必选项目"><a href="#（九）备份nextcloud时的必选项目" class="headerlink" title="（九）备份nextcloud时的必选项目"></a>（九）备份nextcloud时的必选项目</h2><ol>
<li>The config folder</li>
<li>The data folder</li>
<li>The theme folder</li>
<li>The database</li>
</ol>
<h1 id="（三）参考链接"><a href="#（三）参考链接" class="headerlink" title="（三）参考链接"></a>（三）参考链接</h1><ul>
<li><a href="https://www.jianshu.com/p/405fe33b9032">Docker中国源 - 简书 (jianshu.com)</a></li>
<li><a href="https://kebingzao.com/2019/02/25/docker-volume/">Docker Volume - 目录挂载以及文件共享 | Zach Ke’s Notes (kebingzao.com)</a></li>
<li><a href="https://github.com/nextcloud/docker/blob/master/.examples/docker-compose/with-nginx-proxy/mariadb/fpm/docker-compose.yml">docker&#x2F;docker-compose.yml at master · nextcloud&#x2F;docker (github.com)</a></li>
<li><a href="https://stackoverflow.com/questions/41334021/volume-binding-using-docker-compose-on-windows">Volume binding using docker compose on Windows - Stack Overflow</a></li>
<li><a href="https://github.com/docker/for-win/issues/2151#issuecomment-662343075">Volumes mounted from a Linux WSL instance don’t resolve in container · Issue #2151 · docker&#x2F;for-win (github.com)</a></li>
<li><a href="https://stackoverflow.com/questions/36765138/bind-to-docker-socket-on-windows">Bind to docker socket on Windows - Stack Overflow</a></li>
<li><a href="https://github.com/wahyd4/aria2-ariang-x-docker-compose#%E4%BD%BF%E7%94%A8-nextcloud-%E5%AE%89%E8%A3%85">wahyd4&#x2F;aria2-ariang-x-docker-compose: Docker compose files for Aria2+ AriaNg+ filerun&#x2F; Nextcloud&#x2F; h5ai + Plex. 图形化BT，磁力，离线下载，文件管理，播放，投屏 (github.com)</a></li>
<li><a href="https://bynss.com/linux/343532.html">使用Nginx在Ubuntu 20.04上安装NextCloud（LEMP堆栈） - 月灯依旧 (bynss.com)</a></li>
<li><a href="https://stackoverflow.com/questions/43181654/locating-data-volumes-in-docker-desktop-windows">Locating data volumes in Docker Desktop (Windows) - Stack Overflow</a></li>
<li><a href="https://github.com/nginx-proxy/nginx-proxy">nginx-proxy&#x2F;nginx-proxy: Automated nginx proxy for Docker containers using docker-gen (github.com)</a></li>
<li><a href="https://github.com/nextcloud/docker/issues/1270#issuecomment-961684856">Strict mode: no http connection allowed</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/89790081">Docker下Nextcloud的Trusted domains添加 - 知乎 (zhihu.com)</a></li>
<li><a href="https://help.nextcloud.com/t/can-i-move-files-direct-to-nextcloud/33594/3">Can I move files direct to Nextcloud? - 🚧 Installation - Nextcloud community</a></li>
<li><a href="https://github.com/nextcloud/docker/issues/1003">Cannot write to data directory with check_data_directory_permissions set to false · Issue #1003 · nextcloud&#x2F;docker (github.com)</a></li>
<li><a href="https://www.how2shout.com/how-to/how-to-install-nextcloud-on-ubuntu-20-04-lts-wsl-windows-10.html">How to install NextCloud on Ubuntu 20.04 LTS WSL Windows 10 (how2shout.com)</a></li>
</ul>
]]></content>
      <categories>
        <category>Tutorial</category>
      </categories>
      <tags>
        <tag>windows</tag>
        <tag>docker</tag>
        <tag>nextcloud</tag>
        <tag>ECM</tag>
      </tags>
  </entry>
  <entry>
    <title>简单在ubuntu下使用fail2ban</title>
    <url>/ubuntu-fail2ban/</url>
    <content><![CDATA[<p>这世道，家用动态ip都能被扫描暴力破解…没办法，研究了一下fail2ban的用法，记录一下。</p>
<span id="more"></span>


<h1 id="安装fail2ban"><a href="#安装fail2ban" class="headerlink" title="安装fail2ban"></a>安装fail2ban</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt install fail2ban</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo systemctl status fail2ban #查看状态</span><br><span class="line">sudo systemctl start fail2ban  #启动</span><br><span class="line">sudo systemctl enable fail2ban #开机启动</span><br></pre></td></tr></table></figure>

<h1 id="设置fail2ban"><a href="#设置fail2ban" class="headerlink" title="设置fail2ban"></a>设置fail2ban</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Fail2ban按以下顺序读取配置文件。 每个.local文件都会覆盖.conf文件中的设置：</span><br><span class="line"></span><br><span class="line">/etc/fail2ban/jail.conf</span><br><span class="line">/etc/fail2ban/jail.d/*.conf</span><br><span class="line">/etc/fail2ban/jail.local</span><br><span class="line">/etc/fail2ban/jail.d/*.local</span><br></pre></td></tr></table></figure>

<p>我的办法时直接编辑<code>/etc/fail2ban/jail.local</code>，其中的条目会覆盖jail.conf中的对应默认设置:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[DEFAULT]</span><br><span class="line">bantime = 4w    #ban一个月</span><br><span class="line">findtime = 24h  #24小时区间检测</span><br><span class="line">maxretry = 3    #区间检测内最多可以错三次</span><br><span class="line"></span><br><span class="line">## ssh监控时默认开启的 </span><br></pre></td></tr></table></figure>

<p>排除本地ip使用：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">在[DEFAULT]下增加ignoreip = 127.0.0.1/8 ::1 123.123.123.123 192.168.1.0/24</span><br></pre></td></tr></table></figure>

<h1 id="使用fail2ban-client"><a href="#使用fail2ban-client" class="headerlink" title="使用fail2ban-client"></a>使用fail2ban-client</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo fail2ban-client status sshd                  #检查Jails状况</span><br><span class="line"></span><br><span class="line">sudo fail2ban-client set sshd unbanip 23.34.45.56 #取消IP权限</span><br><span class="line"></span><br><span class="line">sudo fail2ban-client set sshd banip 23.34.45.56   #禁止IP</span><br><span class="line"></span><br><span class="line">sudo iptables --list -n                           </span><br><span class="line"># 由于fail2ban的&quot;ssh-iptables&quot;监狱使用iptables来阻塞问题IP地址，你可以通过以下方式来检测当前iptables来验证禁止规则</span><br></pre></td></tr></table></figure>

<h1 id="查看fail2ban-log"><a href="#查看fail2ban-log" class="headerlink" title="查看fail2ban.log"></a>查看fail2ban.log</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tail /var/log/fail2ban.log #查看最近的fail2ban执行情况</span><br></pre></td></tr></table></figure>



<h1 id="ref"><a href="#ref" class="headerlink" title="ref:"></a>ref:</h1><p><a href="https://www.myfreax.com/install-configure-fail2ban-on-ubuntu-20-04/">如何在Ubuntu 20.04上安装和配置Fail2ban (myfreax.com)</a></p>
<p><a href="https://app.sanii.cn/?p=275">Linux防止ssh暴力破解常用方案 | SAnBlog (sanii.cn)</a></p>
<p><a href="https://blog.csdn.net/weixin_43507959/article/details/102763985">ubuntu使用fail2ban防御ssh暴力破解_SitVen-CSDN博客</a></p>
<p><a href="https://www.onitroad.com/jc/linux/linux/security/fail2ban.html">fail2ban安装和配置-之路教程 (onitroad.com)</a></p>
]]></content>
      <categories>
        <category>Tutorial</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
        <tag>fail2ban</tag>
      </tags>
  </entry>
  <entry>
    <title>利用docker自建bitwarden（vaultwarden）</title>
    <url>/self-host-bitwarden(vaultwarden)-with-docker/</url>
    <content><![CDATA[<p>互联网时代密码的重要程度应该不需要赘述了吧。几年前，最初听说有种软件专门用来做密码管的时候，第一个蹦出来的概念是，为啥需要这种玩意儿？</p>
<p>是时候祭出xkcd经典图啦！</p>
<p><img src="https://cdn.jsdelivr.net/gh/0bo/cdn/password_strength.png" alt="password_strength_https://xkcd.com/936/"></p>
<span id="more"></span>

<h1 id="使用windows下的docker"><a href="#使用windows下的docker" class="headerlink" title="使用windows下的docker"></a>使用windows下的docker</h1><p>配合wsl2下的ubuntu使用，并在docker选项中的distro选中安装的ubuntu。</p>
<p>要在ubuntu命令行里docker compose up -d启动。</p>
<p>主要是vwdata位置的写法比较特别，详见下文。</p>
<h1 id="使用openwrt下的docker"><a href="#使用openwrt下的docker" class="headerlink" title="使用openwrt下的docker"></a>使用openwrt下的docker</h1><p>也是在命令行中docker compose up -d启动。使用esir-lean的固件，已经内置了docker-compose了，非常方便。</p>
<h1 id="docker-compose-yml文件"><a href="#docker-compose-yml文件" class="headerlink" title="docker-compose.yml文件"></a>docker-compose.yml文件</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">version: &#x27;3&#x27;</span><br><span class="line"></span><br><span class="line">services:</span><br><span class="line">  vaultwarden:</span><br><span class="line">    image: vaultwarden/server:latest</span><br><span class="line">    container_name: vaultwarden</span><br><span class="line">    restart: always</span><br><span class="line">    environment:</span><br><span class="line">      - WEBSOCKET_ENABLED=true  # Enable WebSocket notifications.</span><br><span class="line">      - VIRTUAL_HOST=xx.abc.com</span><br><span class="line">    volumes:</span><br><span class="line">      #- vwdata:/data                        #linux下</span><br><span class="line">      - /mnt/c/Users/xxx/vwdata:/data        #windows-wsl2-docker下</span><br><span class="line"></span><br><span class="line">  nginx-proxy:</span><br><span class="line">      image: jwilder/nginx-proxy</span><br><span class="line">      restart: always</span><br><span class="line">      ports:</span><br><span class="line">        - 80:80</span><br><span class="line">        - 443:443</span><br><span class="line">      environment:</span><br><span class="line">        - HSTS=off</span><br><span class="line">      volumes:</span><br><span class="line">        - certs:/etc/nginx/certs:ro</span><br><span class="line">        - vhost.d:/etc/nginx/vhost.d</span><br><span class="line">        - html:/usr/share/nginx/html</span><br><span class="line">        - /var/run/docker.sock:/tmp/docker.sock:ro</span><br><span class="line">      depends_on:</span><br><span class="line">            - vaultwarden</span><br><span class="line">volumes:</span><br><span class="line">  vwdata:</span><br><span class="line">  certs:</span><br><span class="line">  vhost.d:</span><br><span class="line">  html:</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>docker compose up -d </p>
<h1 id="卷名的形成"><a href="#卷名的形成" class="headerlink" title="卷名的形成"></a>卷名的形成</h1><p>后生成的vloumes，将以docker-compose.yml所在的文件夹命名，比如所在文件夹名字为<code>vaultwarden</code>,那么生成的volumes就会是<code>vaultwarden_certs</code>等等。转移yml文件位置后，要确保文件夹的名称不变。</p>
<p>vwdata  储存bitwarden中的各站点数据</p>
<p>certs      储存nginx证书</p>
<p>vhost.d 储存站点nginx配置</p>
<h1 id="vhost文件的写法（解决-notifications-hub-should-be-proxied-to-the-websocket-server问题）"><a href="#vhost文件的写法（解决-notifications-hub-should-be-proxied-to-the-websocket-server问题）" class="headerlink" title="vhost文件的写法（解决/notifications/hub should be proxied to the websocket server问题）"></a>vhost文件的写法（解决<code>/notifications/hub should be proxied to the websocket server</code>问题）</h1><p>每个app下<code>environment</code>中的<code>VIRTUAL_HOST</code>赋予了这个app域名</p>
<p>nginx config 中的访问地址应为<code>http://容器名:端口</code></p>
<p>在vhost.d文件夹下建立xx.abc.com的同名文件，在其中加入：</p>
<h2 id="old-version"><a href="#old-version" class="headerlink" title="old version:"></a>old version:</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">client_max_body_size 128M;</span><br><span class="line"></span><br><span class="line">#location / &#123;</span><br><span class="line">#  proxy_pass http://vaultwarden:80;</span><br><span class="line">#  proxy_set_header Host $host;</span><br><span class="line">#  proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">#  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">#  proxy_set_header X-Forwarded-Proto $scheme;</span><br><span class="line">#&#125;</span><br><span class="line">  </span><br><span class="line">location /notifications/hub &#123;</span><br><span class="line">  proxy_pass http://vaultwarden:3012;</span><br><span class="line">  proxy_set_header Upgrade $http_upgrade;</span><br><span class="line">  proxy_set_header Connection &quot;upgrade&quot;;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">location /notifications/hub/negotiate &#123;</span><br><span class="line">  proxy_pass http://vaultwarden:80;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我注释掉了官方写法其中的一部分，不改会报错，根路径本来就会转发向80端口吧。。。</p>
<blockquote>
<p><a href="https://github.com/nginx-proxy/nginx-proxy#virtual-ports">When your container exposes only one port, nginx-proxy will default to this port, else to port 80.</a></p>
</blockquote>
<h2 id="new-version"><a href="#new-version" class="headerlink" title="new version:"></a>new version:</h2><p>新版的官方转发规则用了upstream的写法，比较麻烦，懒得研究相应的docker-nginx的写法了，期待大神补充</p>
<h1 id="ref"><a href="#ref" class="headerlink" title="ref:"></a>ref:</h1><p><a href="https://github.com/nginx-proxy/nginx-proxy/wiki">Home · nginx-proxy&#x2F;nginx-proxy Wiki (github.com)</a></p>
<p><a href="https://github.com/dani-garcia/vaultwarden/wiki/Proxy-examples/cd0df09bd008698d6987eef1937de6364a564063">Old version of nginx proxy example · dani-garcia&#x2F;vaultwarden Wiki (github.com)</a></p>
<p><a href="https://github.com/dani-garcia/vaultwarden/wiki/Proxy-examples/cd0df09bd008698d6987eef1937de6364a564063">new version of nginx proxy example · dani-garcia&#x2F;vaultwarden Wiki (github.com)</a></p>
<p><a href="https://github.com/dani-garcia/vaultwarden/wiki/Enabling-WebSocket-notifications">Enabling WebSocket notifications</a></p>
<p><a href="https://stackoverflow.com/questions/39514293/docker-nginx-proxy-how-to-route-traffic-to-different-container-using-path-and-n">Docker Nginx Proxy: how to route traffic to different container using path and not hostname - Stack Overflow</a></p>
]]></content>
      <categories>
        <category>Tutorial</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>vaultwarden</tag>
      </tags>
  </entry>
  <entry>
    <title>hyper-v虚拟lean-openwrt旁路由中的桥接、ip动态伪装、防火墙设置思考</title>
    <url>/hyper-v-lean-side-router-bridge-firewall-ip-masq/</url>
    <content><![CDATA[<p>研究这事这么久了，来个了断？以后就不瞎想了，毕竟业余选手，能用就好哈！</p>
<span id="more"></span>

<h1 id="1-是否需要桥接？"><a href="#1-是否需要桥接？" class="headerlink" title="1.是否需要桥接？"></a>1.是否需要桥接？</h1><p><strong>交换机</strong>：工作在数据链路层，原理等同于多端口网桥。 作用是连接数个相同网段的不同主机，减少网内冲突，隔离冲突域。 利用存储转发和过滤技术来从物理上分割网段</p>
<p>在接口页面-物理设置中，不勾选桥接时，接口为圆点，只能单选；勾选桥接时，可以多选。</p>
<p>可以把，<code>桥接</code>，想象成没有管理系统的傻瓜交换机，桥接一个物理端口，就是在傻瓜路由器拉出一条线连接那个物理端口，每个网口的状态，由桥接的上游决定。比如，从路由接出来的交换机，接到交换机上的设备分配的ip来自路由器的dhcp，交换机相当于给路由器多加了几个网口插孔。当这个网桥在LAN域之下，那么与之桥接的物理端口也就都是lan口了。</p>
<p>这个<a href="https://www.right.com.cn/forum/thread-4031598-1-1.html">文章</a>有一些关于桥接的讨论，摘录部分如下：</p>
<blockquote>
<p>现在有2个疑问<br>1,笔记本刷的op固件作旁路由,很多人说旁路由要取消lan的桥接接口选项,实际使用的时候,取不取消没感觉到有啥影响,都能正常上网和扶手工竹梯子.<br>2,极路由3刷的openwrt固件, 只要一取消lan的桥接接口选项(默认的是eth0和无线网卡被勾上了),这个硬路由通过网线连lan口的方式马上就不能登录了, 这时候只能重置路由器了</p>
</blockquote>
<blockquote>
<p>这个桥接应该是用于多网口的的软路由，比如8口软路由，一个wan口，另外7个桥接成lan口，我是这样理解的</p>
</blockquote>
<blockquote>
<p>同意，就是开启桥接后，单选变成多选，多个网卡复用一个逻辑链路，把多个网卡数据流汇合到一起作为LAN处理，取消过后就只能单选，只能用一个网卡作为LAN接出口，那么一个LAN口作为接出，一进一出，局域网LAN交换数据</p>
</blockquote>
<blockquote>
<p>PENWRT基于LINUX，来源于电脑系统。LAN和WAN是指不同的防火墙分区（就像WINDOWS链接一个网络后让你选是连接到什么网络一个意思，但LINUX的防火墙分区概念原早于WIN）。而防火墙分区和物理网口既有关系又有很大的区别。一个物理网口可以通过VLAN划分绑定不同的防火墙分区，一个防火墙分区可以绑定多个物理网口。在路由系统里会针对不同的防火墙分区有不同的规则，而你还可以把LAN同时当做一个虚拟网卡来进行IP地址设置以及其他管理。</p>
<p>OPENWRT默认物理网口绑定到LAN区域（也就是桥接），而LAN区域默认拥有路由远程管理权限。但在单臂路由时，由于一个物理网口同时要收发WAN区域流量和LAN区域流量，所以物理网口（eth0）需要取消桥接LAN。在eth0取消桥接LAN后，由于LAN区域已经不再有实际物理网口绑定，原虚拟网卡LAN的地址自动赋值给物理网口eth0，所以并不妨碍我们远程管理路由。但硬路由LAN桥接的eth0网卡有四个子接口（eth0.1-eth0.4），在取消桥接LAN后系统无法给4个子网卡自动设置IP，网卡没有设置IP，所以我们就不能远程管理路由了</p>
<p>旁路由其实并不是传统意义上的路由，可以看做传统意义的V-P：N服务器，他只是作为一个服务器存在，所以他的防火墙区域主要是LAN和Vp?n，而V-P&#x2F;N区域都是基于软件的，接口都是虚拟的，所以一般不会和LAN区域所桥接的接口有什么冲突。</p>
<p>在不桥接LAN接口的情况下，所有的数据包都需要通过程序判断识别为是LAN还是WAN数据包，然后再进一步处理，这会一定程度加重CPU负担，所以可能会有卡顿现象（CPU性能越弱就越明显）。而使用VLAN标识后可以很好解决这种现象，让网络拓扑更清晰，这也是单臂路由推荐的方式，只是需要管理型交换机才能完成。</p>
</blockquote>
<blockquote>
<p>视频UP主大多也只是知其然<br>不知道您明白了没有，桥接最简单的理解就是把选中的物理接口（其实也包括系统的虚拟接口）看作是一个接口，也就是看作是openwrt这里添加的接口，通常会被叫做lan口<br>换句话说假如您有4个网口，第一个作为wan口，后面三个桥接作为lan口，您的PC插后面三个哪个都是一样的，假如您的设备可以开WIFI热点，那么WIFI热点也可以被认为是一个物理接口与其他三个口桥接到lan中，那么连接了WIFI的设备也如同网线直接接到lan上一样，他们可能会被分配同一网段的ip、同样的网关、dns和掩码等等<br>之所以您单网口旁路由桥接与否都可以使用想必您到这里也明白了吧，也就是一个网口桥接不桥接也没有变化，一个网口看作一个网口还是一个网口哈哈哈哈哈<br>但是需要注意的是单臂路由中一个网口桥接与否可能是有一定区别的，具体可以了解一下单臂路由的原理</p>
</blockquote>
<blockquote>
<p>我的理解是桥接的意思是，比如在lan口上，打勾的的那些口互相之间可以通。按道理就算不是单臂路由，在不用vlan的情况下，就算不桥接，电脑直接连上去应该也能进后台。楼主进不了应该就是vlan交换机的设置，导致进后台只能从eth0.1进，如果只勾eth0当然就进不了后台，因为不桥接的话它和eth0.1不通，如果只勾选eth0.1不桥接应该也能进后台</p>
</blockquote>
<blockquote>
<p>说一下我对桥接模式的理解;<br>理论上,桥接就是二层交换机.设为桥接,就是说虚拟出来一个交换机,把这个网口挂上去. 所以设置成桥接后,可选多个网口,这样相当与在内部,多个网口直连到同一个交换机上.<br>取消桥接后,每个接口都可以理解成一个三层口,你只有直连这个三层口,配上ip才能访问. 其他口都是相互独立的.所以连不上了.</p>
<p>但是为何做旁路由都在强调取消桥接呢? 有的人说不取消也没事.有的人却强调取消. 我也是实验中发现一个其中的原因.</p>
<p>先说结论: 这里的桥接和普通意义交换机有不同.因为它会arp劫持. 劫持非桥接网段的其他网段ip. 你要细品.再细品,不信就试试看.<br>举个例子:<br>家用互联网.一般不做vlan划分,如果同一个网络中使用两个不同网段ip. 比如上网的是192.168.1.0&#x2F;24 家里的监控不联网,摄像头硬盘录像机使用192.168.2.0&#x2F;24.<br>肯定有人说为啥不单独走线,两个网段在同一个网络中,ip广播怎么办.这些都不是一般用户考虑的事情.本身设备也不多呀. 但是当挂上openwrt后.故事就这样开始了.<br>openwrt lan口开桥接模式.ip 192.168.1.2&#x2F;24 ,然后并到主网络中. 好吗,你会发现摄像头登录不上了. 不信邪.尝试改本机的ip为192.168.2.0&#x2F;24 直连摄像头.可提示ip冲突. (winxp 会无法设置ip,ip会空. win7以上系统可以设置.单会提示ip冲突. )换个ip同样如此.<br>去openwrt看一下,发现arp出现了问题. 电脑设置的ip地址会备绑定在一个随机的mac上.所以才会提示ip冲突. 我只好把它理解成arp劫持. 它的网桥就是默认开启了这个功能.<br>如果网络中只有这一个网段,我所谓.但是要有其他网段.必须要关闭桥接模式.</p>
</blockquote>
<p>无法判断那个下边说的劫持是否为真，不过我有遇到过虚拟机里的openwrt没有关dhcp，还是一个不同的网段（192.168.0.x），会在内网中抢答给新接入的设备分配到非192.168.1.x的地址，导致不能工作。</p>
<p><strong>结论：单口的路由，虚拟旁路有，关闭与否没关系。但，不过点一下的事么，解除绑定吧。</strong></p>
<h1 id="2-是否需要开启ip动态伪装或者防火墙规则设置？"><a href="#2-是否需要开启ip动态伪装或者防火墙规则设置？" class="headerlink" title="2.是否需要开启ip动态伪装或者防火墙规则设置？"></a>2.是否需要开启ip动态伪装或者防火墙规则设置？</h1><p>不开启的主要表现是，可以上外网，但不能上内网。</p>
<p>有的<a href="https://www.right.com.cn/forum/thread-7817323-1-1.html">帖子</a>讨论中指出，不同的翻墙软件有可能导致不同的结果。比如openclash不需要，但ssrplus和passwall（我的常用）需要。</p>
<p>另外，还有说不同的主路由也可能影响是否需要开启。</p>
<p>一些有用的讨论摘录如下：</p>
<blockquote>
<p>因为旁路由处理过后，ip变了，一个mac对应两个ip</p>
</blockquote>
<blockquote>
<p>别纠结了，不需要科学的设备直接通过主路由，需要科学的话，伪装不伪装的都一样。这个伪装有的说需要有的说不需要应该和主路由有关，我的旁路由只要设置好lan的网关和dns就可以了其它不用设置</p>
</blockquote>
<blockquote>
<p>开不开动态伪装，和使用那种代理工具也有关系</p>
<p>我主路由是TP-LINK的，负责dhcp，dns默认不填。<br>旁路由使用OpenClash的话，旁路由的dns不填，也不用打开动态伪装，国内外一切正常。<br>旁路由使用s-s-r  p+的话，要开动态伪装，且旁路由要设dns（可以公共也可以是主路由的），不然外国可以上网，国内无法上网。</p>
<p>我的结论就是：不仅要看使用什么品牌的主路由，而且还要看使用什么代理工具，使用OpenClash不用开动态伪装，其他代理工具估计都有要开，至少s-s-r  p+需要开，其他代理工具我没测，估计要开吧</p>
</blockquote>
<blockquote>
<p>这个我也不知道，反正是我在使用过程中偶然发现小猫咪可以不用开动态伪装的。。。<br>可能小猫咪拿到更高权限吧，比如dns劫持（所以旁路由和主路由都不用另外设置dns）和包括类似动态伪装之类的权限吧</p>
<p>反正小猫咪也好用，规则细致，切换节点和规则也很方便，所以不开动态伪装这个问题算是间接的解决了。。</p>
</blockquote>
<p>还有个<a href="https://www.jianshu.com/p/e7ccb32c0462">文章</a>讨论了ip动态伪装与mss钳制：</p>
<blockquote>
<p><strong>ip动态伪装的英文是masq，即MASQUERADE，所以就是WAN口的nat设置。</strong></p>
</blockquote>
<p>这句话很有意思，当局域网的其他设备把网关改为openwrt的ip时，相当于接入了这个lan网桥，还是个没有开启nat的网桥，所以没有办法做地址转换实现联通。</p>
<p>另一个想法是，其他设备实际上与这个oepnwrt在一个子网的，不开启的时候，即使网关改为openwrt，地址转化还是受到主路由的影响，所以会有奇怪的不通现象吧。</p>
<p><strong>结论：还是要开的。。。</strong></p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://youtu.be/jXMgAz_GQxI?list=RDCMUCOhkliOps3IS48ly-MgPC2A&t=1741">https://youtu.be/jXMgAz_GQxI?list=RDCMUCOhkliOps3IS48ly-MgPC2A&amp;t=1741</a></li>
<li><a href="https://www.right.com.cn/forum/thread-4031598-1-1.html">lan物理设置中的桥接接口到底怎么用-软路由,x86系统,openwrt(x86),Router OS 等-恩山无线论坛 (right.com.cn)</a></li>
<li><a href="https://www.right.com.cn/forum/thread-7817323-1-1.html">openwrt旁路由该如何设置？（动态伪装相关）-OPENWRT专版-恩山无线论坛 (right.com.cn)</a> </li>
<li>[<a href="https://openwrt.org/zh/docs/guide-developer/networking/network.interfaces">OpenWrt Wiki] Linux 网络接口(Network Interfaces)</a></li>
<li><a href="https://einverne.github.io/post/2017/03/openwrt-settings-and-tips.html">Openwrt 接口及基本设置 | Verne in GitHub (einverne.github.io)</a></li>
<li><a href="https://www.jianshu.com/p/e7ccb32c0462">openwrt避坑指南1：IP动态伪装和MSS钳制 - 简书 (jianshu.com)</a></li>
</ol>
]]></content>
      <categories>
        <category>Tutorial</category>
      </categories>
      <tags>
        <tag>win10</tag>
        <tag>hyper-v</tag>
        <tag>lede</tag>
        <tag>lean</tag>
      </tags>
  </entry>
  <entry>
    <title>SteamDeck折腾记</title>
    <url>/steamdeck-geek/</url>
    <content><![CDATA[<h1 id="基础操作"><a href="#基础操作" class="headerlink" title="基础操作"></a>基础操作</h1><ol>
<li><p>音量减+电源：启动项选择</p>
</li>
<li><p>音量加+电源：BIOS</p>
</li>
<li><p>三点+电源：GRUB</p>
</li>
<li><p>BIOS里的battery storage mode可以清楚一些底层缓存，有效缓解windows的蓝屏</p>
</li>
</ol>
<span id="more"></span>

<h1 id="分区安装windows"><a href="#分区安装windows" class="headerlink" title="分区安装windows"></a>分区安装windows</h1><ol>
<li><a href="https://gparted.org/download.php">Gparted</a>用于调整分区大小，如果空余空间不能自动合并到steamos的home分区，也可以用这个调整。</li>
<li><a href="https://github.com/ryanrudolfoba/SteamDeck-Clover-dualboot">SteamDeck-Clover-dualboot</a>用于图形界面选择双系统启动项。</li>
</ol>
<h1 id="重置steamos的sudo密码"><a href="#重置steamos的sudo密码" class="headerlink" title="重置steamos的sudo密码"></a>重置steamos的sudo密码</h1><ol>
<li><p>下载<a href="https://steamdeck-images.steamos.cloud/recovery/">steamdeck-recovery-4.img.bz2</a>镜像文件</p>
</li>
<li><p>用rufus刻录到U盘</p>
</li>
<li><p>启动到u盘恢复镜像后，选择<code>terminal with repair tools</code></p>
</li>
<li><pre><code>sudo ~/tools/repair_device.sh chroot 
rm -f /var/lib/overlays/etc/upper/passwd 
rm -f /var/lib/overlays/etc/upper/shadow
</code></pre>
</li>
<li><p>重启即刻重置</p>
</li>
</ol>
<h1 id="添加ntfs分区作为游戏库并自动挂载"><a href="#添加ntfs分区作为游戏库并自动挂载" class="headerlink" title="添加ntfs分区作为游戏库并自动挂载"></a>添加ntfs分区作为游戏库并自动挂载</h1><ol>
<li><p>创建<code>/mnt/ntfs</code>用于挂载</p>
</li>
<li><p>利用<code>fdisk -l</code>确认共享盘的路径</p>
</li>
<li><p>编辑<code>/etc/fstab </code></p>
</li>
<li><p>添加<code>/dev/nvme0n1p9 /mnt/ntfs ntfs defaults,nofail,uid=deck,gid=deck 0 0 </code></p>
</li>
<li><p>禁用steamos系统只读<code>steamos-readonly disable</code></p>
</li>
<li><p>打开<code>/usr/share/polkit-1/actions/org.freedesktop.UDisks2.policy </code></p>
</li>
<li><p>修改</p>
</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;allow_active&gt;auth_admin_keep&lt;/allow_active&gt;</span><br><span class="line">改为</span><br><span class="line">&lt;allow_active&gt;yes&lt;/allow_active&gt; </span><br></pre></td></tr></table></figure>

<ol start="8">
<li>启用steamos系统只读<code>steamos-readonly enable</code></li>
</ol>
<h1 id="添加学习版游戏公用运行库"><a href="#添加学习版游戏公用运行库" class="headerlink" title="添加学习版游戏公用运行库"></a>添加学习版游戏公用运行库</h1><ol>
<li>模拟win系统环境包文件夹<code>/home/deck/.local/share/Steam/steamapps/compatdata/XXXXXXXX</code>（随机文件夹号） </li>
<li>缓存文件位置<code>/home/deck/.local/share/Steam/steamapps/shadercache/xxxx</code>，删除游戏时也要删除此项 （可以吧shadercache文件夹移动到其他分区，然后在原地址建立link，以节省空间）</li>
<li>增加游戏时，先添加游戏，运行一次生成compatdata下的随机编号文件夹。然后删除文件夹的内容，避免空间占用。</li>
<li>修改启动参数，替换<code>启动选项</code>为公用运行库的目录。游戏右键-属性-启动选项：<code>RADV_PERFTEST=gpl STEAM_COMPAT_DATA_PATH=/home/deck/.local/share/Steam/steamapps/compatdata/XXXXXXX %command% </code></li>
<li>如需要增加其他的运行库，则替换<code>目标</code>，会在公共运行库里增加相关内容整合。</li>
<li>游戏存档目录1 <code>/home/deck/.local/share/Steam/steamapps/compatdata/XXXXXX/pfx/drive_c/users/steamuser/AppData/Local/ </code></li>
<li>游戏存档目录2 <code>/home/deck/.local/share/Steam/steamapps/compatdata/XXXXXX/pfx/drive_c/users/steamuser/My Documents/</code></li>
</ol>
<h1 id="美化封面"><a href="#美化封面" class="headerlink" title="美化封面"></a>美化封面</h1><ol>
<li>使用插件商城插件 <a href="https://decky.xyz/">Decky Loader - Steam Deck Homebrew</a></li>
<li>使用<a href="https://www.steamgriddb.com/">Steamgriddb</a>网站手动下载设置封面封面插件下载</li>
<li>封面保存目录（XXXXXXX随机ID） <code>/home/deck/.local/share/Steam/userdata/XXXXXXX/config/grid/</code></li>
</ol>
<h1 id="其他可剪切建立链接的文件位置"><a href="#其他可剪切建立链接的文件位置" class="headerlink" title="其他可剪切建立链接的文件位置"></a>其他可剪切建立链接的文件位置</h1><ol>
<li>着色器缓存目录&#x2F;home&#x2F;deck&#x2F;.local&#x2F;share&#x2F;Steam&#x2F;steamapps&#x2F;shadercache&#x2F; </li>
<li>插件商城开机动画下载目录&#x2F;home&#x2F;deck&#x2F;.config&#x2F;AnimationChanger&#x2F;downloads&#x2F; </li>
<li>开机动画安装目录&#x2F;home&#x2F;deck&#x2F;.steam&#x2F;root&#x2F;config&#x2F;uioverrides&#x2F;movies&#x2F; </li>
<li>主页主题目录&#x2F;home&#x2F;deck&#x2F;homebrew&#x2F;themes&#x2F;</li>
</ol>
<h1 id="更换国内源"><a href="#更换国内源" class="headerlink" title="更换国内源"></a>更换国内源</h1><ol>
<li><code>sudo steamos-readonly disable</code>  解锁系统，再去换源嗷</li>
<li>改成镜像源<code>sudo flatpak remote-modify flathub --url=https://mirror.sjtu.edu.cn/flathub</code></li>
<li>换回官方源<code>sudo flatpak remote-modify flathub --url=https://flathub.org/repo/flathub.flatpakrepo</code></li>
<li><code>sudo steamos-readonly enable</code> 锁定系统</li>
</ol>
<h1 id="安装插件商店"><a href="#安装插件商店" class="headerlink" title="安装插件商店"></a>安装插件商店</h1><ol>
<li><a href="https://decky.xyz/">Decky Loader - Steam Deck Homebrew</a>或直接用以下命令</li>
<li><code>curl -L https://github.com/SteamDeckHomebrew/decky-installer/releases/latest/download/install_release.sh | sh</code></li>
<li>ToMoon等</li>
</ol>
<h1 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h1><p><a href="https://www.bilibili.com/read/cv18881740/?spm_id_from=333.999.collection.opus.click">Steam Deck单硬盘双系统+互通游戏库详细教程 - 哔哩哔哩 (bilibili.com)</a></p>
<p><a href="https://www.bilibili.com/read/cv20979420/?spm_id_from=333.999.collection.opus.click">【爱折腾】SteamDeck完全折腾指南-D1-双系统挂载相同分区 - 哔哩哔哩 (bilibili.com)</a></p>
<p><a href="https://www.bilibili.com/read/cv22721234/">SteamDeck多系统引导新方案！（解决花屏，掉引导，安装更傻瓜一键操作）四叶草引导 - 哔哩哔哩 (bilibili.com)</a></p>
]]></content>
      <categories>
        <category>Tutorial</category>
      </categories>
      <tags>
        <tag>steamdeck</tag>
        <tag>game</tag>
      </tags>
  </entry>
</search>
